
Bruxism_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005094  08005094  00006094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b8  080051b8  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051c0  080051c0  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c0  080051c0  000061c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c4  080051c4  000061c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  20000070  08005238  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  08005238  00007934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156ce  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb4  00000000  00000000  0001c76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0001f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce7  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195a6  00000000  00000000  00021187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015241  00000000  00000000  0003a72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927a5  00000000  00000000  0004f96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2113  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cec  00000000  00000000  000e2158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000e6e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800507c 	.word	0x0800507c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800507c 	.word	0x0800507c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000584:	2006      	movs	r0, #6
 8000586:	f001 f816 	bl	80015b6 <HAL_NVIC_EnableIRQ>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}

0800058e <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000592:	2006      	movs	r0, #6
 8000594:	f001 f81d 	bl	80015d2 <HAL_NVIC_DisableIRQ>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b20      	ldr	r3, [pc, #128]	@ (800062c <HCI_TL_SPI_Init+0x90>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ac:	4a1f      	ldr	r2, [pc, #124]	@ (800062c <HCI_TL_SPI_Init+0x90>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b4:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <HCI_TL_SPI_Init+0x90>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005c0:	2301      	movs	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	4816      	ldr	r0, [pc, #88]	@ (8000630 <HCI_TL_SPI_Init+0x94>)
 80005d6:	f001 f869 	bl	80016ac <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	480f      	ldr	r0, [pc, #60]	@ (8000630 <HCI_TL_SPI_Init+0x94>)
 80005f4:	f001 f85a 	bl	80016ac <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	4619      	mov	r1, r3
 800060e:	4808      	ldr	r0, [pc, #32]	@ (8000630 <HCI_TL_SPI_Init+0x94>)
 8000610:	f001 f84c 	bl	80016ac <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2102      	movs	r1, #2
 8000618:	4805      	ldr	r0, [pc, #20]	@ (8000630 <HCI_TL_SPI_Init+0x94>)
 800061a:	f001 fac7 	bl	8001bac <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800061e:	f000 fa2b 	bl	8000a78 <BSP_SPI1_Init>
 8000622:	4603      	mov	r3, r0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000

08000634 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000638:	2101      	movs	r1, #1
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <HCI_TL_SPI_DeInit+0x24>)
 800063c:	f001 f9ba 	bl	80019b4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000640:	2102      	movs	r1, #2
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <HCI_TL_SPI_DeInit+0x24>)
 8000644:	f001 f9b6 	bl	80019b4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000648:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800064c:	4802      	ldr	r0, [pc, #8]	@ (8000658 <HCI_TL_SPI_DeInit+0x24>)
 800064e:	f001 f9b1 	bl	80019b4 <HAL_GPIO_DeInit>
  return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020000 	.word	0x40020000

0800065c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2102      	movs	r1, #2
 8000664:	480b      	ldr	r0, [pc, #44]	@ (8000694 <HCI_TL_SPI_Reset+0x38>)
 8000666:	f001 faa1 	bl	8001bac <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000670:	4808      	ldr	r0, [pc, #32]	@ (8000694 <HCI_TL_SPI_Reset+0x38>)
 8000672:	f001 fa9b 	bl	8001bac <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000676:	2005      	movs	r0, #5
 8000678:	f000 fe5e 	bl	8001338 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <HCI_TL_SPI_Reset+0x38>)
 8000684:	f001 fa92 	bl	8001bac <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000688:	2005      	movs	r0, #5
 800068a:	f000 fe55 	bl	8001338 <HAL_Delay>
  return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40020000 	.word	0x40020000

08000698 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80006a8:	2300      	movs	r3, #0
 80006aa:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006ac:	4a30      	ldr	r2, [pc, #192]	@ (8000770 <HCI_TL_SPI_Receive+0xd8>)
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b6:	6018      	str	r0, [r3, #0]
 80006b8:	3304      	adds	r3, #4
 80006ba:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80006bc:	f7ff ff67 	bl	800058e <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2102      	movs	r1, #2
 80006c4:	482b      	ldr	r0, [pc, #172]	@ (8000774 <HCI_TL_SPI_Receive+0xdc>)
 80006c6:	f001 fa71 	bl	8001bac <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006ca:	f107 0108 	add.w	r1, r7, #8
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	2205      	movs	r2, #5
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f9ff 	bl	8000ad8 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80006da:	7b3b      	ldrb	r3, [r7, #12]
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	b21a      	sxth	r2, r3
 80006e0:	7afb      	ldrb	r3, [r7, #11]
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80006ea:	8bfb      	ldrh	r3, [r7, #30]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d01e      	beq.n	800072e <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80006f0:	8bfa      	ldrh	r2, [r7, #30]
 80006f2:	887b      	ldrh	r3, [r7, #2]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d901      	bls.n	80006fc <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 80006f8:	887b      	ldrh	r3, [r7, #2]
 80006fa:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	777b      	strb	r3, [r7, #29]
 8000700:	e010      	b.n	8000724 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000702:	f107 0116 	add.w	r1, r7, #22
 8000706:	f107 0317 	add.w	r3, r7, #23
 800070a:	2201      	movs	r2, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f9e3 	bl	8000ad8 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8000712:	7f7b      	ldrb	r3, [r7, #29]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	7dba      	ldrb	r2, [r7, #22]
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800071e:	7f7b      	ldrb	r3, [r7, #29]
 8000720:	3301      	adds	r3, #1
 8000722:	777b      	strb	r3, [r7, #29]
 8000724:	7f7b      	ldrb	r3, [r7, #29]
 8000726:	b29b      	uxth	r3, r3
 8000728:	8bfa      	ldrh	r2, [r7, #30]
 800072a:	429a      	cmp	r2, r3
 800072c:	d8e9      	bhi.n	8000702 <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 800072e:	f000 fdf7 	bl	8001320 <HAL_GetTick>
 8000732:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000734:	e006      	b.n	8000744 <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8000736:	2101      	movs	r1, #1
 8000738:	480e      	ldr	r0, [pc, #56]	@ (8000774 <HCI_TL_SPI_Receive+0xdc>)
 800073a:	f001 fa1f 	bl	8001b7c <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d008      	beq.n	8000756 <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000744:	f000 fdec 	bl	8001320 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000752:	d3f0      	bcc.n	8000736 <HCI_TL_SPI_Receive+0x9e>
 8000754:	e000      	b.n	8000758 <HCI_TL_SPI_Receive+0xc0>
      break;
 8000756:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8000758:	f7ff ff12 	bl	8000580 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2102      	movs	r1, #2
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <HCI_TL_SPI_Receive+0xdc>)
 8000762:	f001 fa23 	bl	8001bac <HAL_GPIO_WritePin>

  return len;
 8000766:	7f7b      	ldrb	r3, [r7, #29]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	08005094 	.word	0x08005094
 8000774:	40020000 	.word	0x40020000

08000778 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000784:	4a3f      	ldr	r2, [pc, #252]	@ (8000884 <HCI_TL_SPI_Send+0x10c>)
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078e:	6018      	str	r0, [r3, #0]
 8000790:	3304      	adds	r3, #4
 8000792:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000794:	f000 fdc4 	bl	8001320 <HAL_GetTick>
 8000798:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 800079a:	f7ff fef8 	bl	800058e <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 800079e:	f000 fdbf 	bl	8001320 <HAL_GetTick>
 80007a2:	61f8      	str	r0, [r7, #28]

    result = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2102      	movs	r1, #2
 80007ac:	4836      	ldr	r0, [pc, #216]	@ (8000888 <HCI_TL_SPI_Send+0x110>)
 80007ae:	f001 f9fd 	bl	8001bac <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80007b2:	e00a      	b.n	80007ca <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80007b4:	f000 fdb4 	bl	8001320 <HAL_GetTick>
 80007b8:	4602      	mov	r2, r0
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	2b64      	cmp	r3, #100	@ 0x64
 80007c0:	d903      	bls.n	80007ca <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 80007c2:	f06f 0302 	mvn.w	r3, #2
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80007c8:	e004      	b.n	80007d4 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 80007ca:	f000 f861 	bl	8000890 <IsDataAvailable>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0ef      	beq.n	80007b4 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 80007d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d6:	f113 0f03 	cmn.w	r3, #3
 80007da:	d105      	bne.n	80007e8 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2102      	movs	r1, #2
 80007e0:	4829      	ldr	r0, [pc, #164]	@ (8000888 <HCI_TL_SPI_Send+0x110>)
 80007e2:	f001 f9e3 	bl	8001bac <HAL_GPIO_WritePin>
      break;
 80007e6:	e030      	b.n	800084a <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007e8:	f107 010c 	add.w	r1, r7, #12
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2205      	movs	r2, #5
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f970 	bl	8000ad8 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	b21a      	sxth	r2, r3
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	b21b      	sxth	r3, r3
 8000802:	4313      	orrs	r3, r2
 8000804:	b21b      	sxth	r3, r3
 8000806:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000808:	8b7a      	ldrh	r2, [r7, #26]
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	429a      	cmp	r2, r3
 800080e:	d306      	bcc.n	800081e <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	461a      	mov	r2, r3
 8000814:	491d      	ldr	r1, [pc, #116]	@ (800088c <HCI_TL_SPI_Send+0x114>)
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f95e 	bl	8000ad8 <BSP_SPI1_SendRecv>
 800081c:	e002      	b.n	8000824 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 800081e:	f06f 0301 	mvn.w	r3, #1
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2102      	movs	r1, #2
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <HCI_TL_SPI_Send+0x110>)
 800082a:	f001 f9bf 	bl	8001bac <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800082e:	f000 fd77 	bl	8001320 <HAL_GetTick>
 8000832:	4602      	mov	r2, r0
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	2b64      	cmp	r3, #100	@ 0x64
 800083a:	d903      	bls.n	8000844 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 800083c:	f06f 0302 	mvn.w	r3, #2
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8000842:	e002      	b.n	800084a <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8000844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000846:	2b00      	cmp	r3, #0
 8000848:	dba9      	blt.n	800079e <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 800084a:	f000 fd69 	bl	8001320 <HAL_GetTick>
 800084e:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000850:	e006      	b.n	8000860 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8000852:	2101      	movs	r1, #1
 8000854:	480c      	ldr	r0, [pc, #48]	@ (8000888 <HCI_TL_SPI_Send+0x110>)
 8000856:	f001 f991 	bl	8001b7c <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d008      	beq.n	8000872 <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000860:	f000 fd5e 	bl	8001320 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	6a3b      	ldr	r3, [r7, #32]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800086e:	d3f0      	bcc.n	8000852 <HCI_TL_SPI_Send+0xda>
 8000870:	e000      	b.n	8000874 <HCI_TL_SPI_Send+0xfc>
      break;
 8000872:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8000874:	f7ff fe84 	bl	8000580 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8000878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800087a:	4618      	mov	r0, r3
 800087c:	3728      	adds	r7, #40	@ 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	0800509c 	.word	0x0800509c
 8000888:	40020000 	.word	0x40020000
 800088c:	20000094 	.word	0x20000094

08000890 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000894:	2101      	movs	r1, #1
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <IsDataAvailable+0x1c>)
 8000898:	f001 f970 	bl	8001b7c <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	bf0c      	ite	eq
 80008a2:	2301      	moveq	r3, #1
 80008a4:	2300      	movne	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020000 	.word	0x40020000

080008b0 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80008b6:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <hci_tl_lowlevel_init+0x54>)
 80008b8:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <hci_tl_lowlevel_init+0x58>)
 80008bc:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <hci_tl_lowlevel_init+0x5c>)
 80008c0:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80008c2:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <hci_tl_lowlevel_init+0x60>)
 80008c4:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <hci_tl_lowlevel_init+0x64>)
 80008c8:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <hci_tl_lowlevel_init+0x68>)
 80008cc:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 f99b 	bl	8003c0c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80008d6:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 80008da:	4810      	ldr	r0, [pc, #64]	@ (800091c <hci_tl_lowlevel_init+0x6c>)
 80008dc:	f000 fead 	bl	800163a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80008e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <hci_tl_lowlevel_init+0x70>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	480d      	ldr	r0, [pc, #52]	@ (800091c <hci_tl_lowlevel_init+0x6c>)
 80008e6:	f000 fe8e 	bl	8001606 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2006      	movs	r0, #6
 80008f0:	f000 fe45 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008f4:	2006      	movs	r0, #6
 80008f6:	f000 fe5e 	bl	80015b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80008fa:	bf00      	nop
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	0800059d 	.word	0x0800059d
 8000908:	08000635 	.word	0x08000635
 800090c:	08000779 	.word	0x08000779
 8000910:	08000699 	.word	0x08000699
 8000914:	0800065d 	.word	0x0800065d
 8000918:	08000b19 	.word	0x08000b19
 800091c:	2000008c 	.word	0x2000008c
 8000920:	08000925 	.word	0x08000925

08000924 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000928:	e005      	b.n	8000936 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800092a:	2000      	movs	r0, #0
 800092c:	f003 faa6 	bl	8003e7c <hci_notify_asynch_evt>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d105      	bne.n	8000942 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000936:	f7ff ffab 	bl	8000890 <IsDataAvailable>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f4      	bne.n	800092a <hci_tl_lowlevel_isr+0x6>
 8000940:	e000      	b.n	8000944 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8000942:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <bluenrg_init>:
#include "stdlib.h"

#define bdaddre_size 6
uint8_t SERVER_BDARR[]={0x01,0x02,0x03,0x04,0x05,0x6};
void bluenrg_init(void)
	{
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af02      	add	r7, sp, #8
	const char *name ="Trix";
 800094e:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <bluenrg_init+0xcc>)
 8000950:	617b      	str	r3, [r7, #20]
	tBleStatus ret;
	uint8_t bdaddre[bdaddre_size];
	BLUENRG_memcpy(bdaddre,SERVER_BDARR,sizeof(SERVER_BDARR));
 8000952:	4a31      	ldr	r2, [pc, #196]	@ (8000a18 <bluenrg_init+0xd0>)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095c:	6018      	str	r0, [r3, #0]
 800095e:	3304      	adds	r3, #4
 8000960:	8019      	strh	r1, [r3, #0]
	 * 5.Initialize GAP service
	 * 6.Update characteristics
	 * 7.Add custom service
	 * */
	/*1.*/
	hci_init(0,0);
 8000962:	2100      	movs	r1, #0
 8000964:	2000      	movs	r0, #0
 8000966:	f003 f90f 	bl	8003b88 <hci_init>
	hci_reset();
 800096a:	f002 fd2f 	bl	80033cc <hci_reset>
	HAL_Delay(100);
 800096e:	2064      	movs	r0, #100	@ 0x64
 8000970:	f000 fce2 	bl	8001338 <HAL_Delay>
	ret=aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,CONFIG_DATA_PUBADDR_LEN, bdaddre);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	461a      	mov	r2, r3
 800097a:	2106      	movs	r1, #6
 800097c:	2000      	movs	r0, #0
 800097e:	f002 ffda 	bl	8003936 <aci_hal_write_config_data>
 8000982:	4603      	mov	r3, r0
 8000984:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_hal_write_config_data failed \r\n");}
 8000986:	7cfb      	ldrb	r3, [r7, #19]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <bluenrg_init+0x4a>
 800098c:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <bluenrg_init+0xd4>)
 800098e:	f003 fd03 	bl	8004398 <puts>
	ret=aci_gatt_init();
 8000992:	f002 fef4 	bl	800377e <aci_gatt_init>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_init failed \r\n");}
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <bluenrg_init+0x5e>
 80009a0:	481f      	ldr	r0, [pc, #124]	@ (8000a20 <bluenrg_init+0xd8>)
 80009a2:	f003 fcf9 	bl	8004398 <puts>
	ret=aci_gap_init(GAP_PERIPHERAL_ROLE,0,0x07,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 80009a6:	f107 020a 	add.w	r2, r7, #10
 80009aa:	1dbb      	adds	r3, r7, #6
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	4613      	mov	r3, r2
 80009b6:	2207      	movs	r2, #7
 80009b8:	2100      	movs	r1, #0
 80009ba:	2001      	movs	r0, #1
 80009bc:	f002 fe32 	bl	8003624 <aci_gap_init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_init failed \r\n");}
 80009c4:	7cfb      	ldrb	r3, [r7, #19]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <bluenrg_init+0x88>
 80009ca:	4816      	ldr	r0, [pc, #88]	@ (8000a24 <bluenrg_init+0xdc>)
 80009cc:	f003 fce4 	bl	8004398 <puts>
	ret=aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 80009d0:	897c      	ldrh	r4, [r7, #10]
 80009d2:	893d      	ldrh	r5, [r7, #8]
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	f7ff fc03 	bl	80001e0 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	4613      	mov	r3, r2
 80009e4:	2200      	movs	r2, #0
 80009e6:	4629      	mov	r1, r5
 80009e8:	4620      	mov	r0, r4
 80009ea:	f002 fef2 	bl	80037d2 <aci_gatt_update_char_value>
 80009ee:	4603      	mov	r3, r0
 80009f0:	74fb      	strb	r3, [r7, #19]
	if(ret !=BLE_STATUS_SUCCESS){printf("aci_gatt_update_char_value failed \r\n");}
 80009f2:	7cfb      	ldrb	r3, [r7, #19]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d002      	beq.n	80009fe <bluenrg_init+0xb6>
 80009f8:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <bluenrg_init+0xe0>)
 80009fa:	f003 fccd 	bl	8004398 <puts>
	//add custom service
//	ret = add_simple_service();
	if(ret !=BLE_STATUS_SUCCESS){printf("add_simple_service failed \r\n");}
 80009fe:	7cfb      	ldrb	r3, [r7, #19]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <bluenrg_init+0xc2>
 8000a04:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <bluenrg_init+0xe4>)
 8000a06:	f003 fcc7 	bl	8004398 <puts>
	}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bdb0      	pop	{r4, r5, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	080050a4 	.word	0x080050a4
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	080050ac 	.word	0x080050ac
 8000a20:	080050d0 	.word	0x080050d0
 8000a24:	080050e8 	.word	0x080050e8
 8000a28:	08005100 	.word	0x08005100
 8000a2c:	08005124 	.word	0x08005124

08000a30 <bluenrg_process>:

void bluenrg_process(void)
		{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	@ 0x30
 8000a34:	af08      	add	r7, sp, #32
			tBleStatus ret;
			uint8_t local_name[]={AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','G','-','U','P'};
 8000a36:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <bluenrg_process+0x44>)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a3c:	c303      	stmia	r3!, {r0, r1}
 8000a3e:	701a      	strb	r2, [r3, #0]
			ret=aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,
 8000a40:	2300      	movs	r3, #0
 8000a42:	9306      	str	r3, [sp, #24]
 8000a44:	2300      	movs	r3, #0
 8000a46:	9305      	str	r3, [sp, #20]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9304      	str	r3, [sp, #16]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9303      	str	r3, [sp, #12]
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	9302      	str	r3, [sp, #8]
 8000a54:	2309      	movs	r3, #9
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2000      	movs	r0, #0
 8000a64:	f002 fcdb 	bl	800341e <aci_gap_set_discoverable>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]
					NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);

			//if(ret !=BLE_STATUS_SUCCESS){printf("aci_gap_set_discoverable failed \r\n");}
		}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08005140 	.word	0x08005140

08000a78 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <BSP_SPI1_Init+0x54>)
 8000a84:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <BSP_SPI1_Init+0x58>)
 8000a86:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <BSP_SPI1_Init+0x5c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	4911      	ldr	r1, [pc, #68]	@ (8000ad4 <BSP_SPI1_Init+0x5c>)
 8000a90:	600a      	str	r2, [r1, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d114      	bne.n	8000ac0 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000a96:	480d      	ldr	r0, [pc, #52]	@ (8000acc <BSP_SPI1_Init+0x54>)
 8000a98:	f001 ffa1 	bl	80029de <HAL_SPI_GetState>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10e      	bne.n	8000ac0 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000aa2:	480a      	ldr	r0, [pc, #40]	@ (8000acc <BSP_SPI1_Init+0x54>)
 8000aa4:	f000 f87c 	bl	8000ba0 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d108      	bne.n	8000ac0 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000aae:	4807      	ldr	r0, [pc, #28]	@ (8000acc <BSP_SPI1_Init+0x54>)
 8000ab0:	f000 f83a 	bl	8000b28 <MX_SPI1_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000aba:	f06f 0307 	mvn.w	r3, #7
 8000abe:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000194 	.word	0x20000194
 8000ad0:	40013000 	.word	0x40013000
 8000ad4:	200001ec 	.word	0x200001ec

08000ad8 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000af0:	9200      	str	r2, [sp, #0]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	68f9      	ldr	r1, [r7, #12]
 8000af6:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <BSP_SPI1_SendRecv+0x3c>)
 8000af8:	f001 fdc1 	bl	800267e <HAL_SPI_TransmitReceive>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000b02:	f06f 0305 	mvn.w	r3, #5
 8000b06:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000b08:	697b      	ldr	r3, [r7, #20]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000194 	.word	0x20000194

08000b18 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b1c:	f000 fc00 	bl	8001320 <HAL_GetTick>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <MX_SPI1_Init+0x74>)
 8000b38:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b40:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2201      	movs	r2, #1
 8000b58:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b60:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2228      	movs	r2, #40	@ 0x28
 8000b66:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f001 fce9 	bl	8002558 <HAL_SPI_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40013000 	.word	0x40013000

08000ba0 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	4b2d      	ldr	r3, [pc, #180]	@ (8000c64 <SPI1_MspInit+0xc4>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8000c64 <SPI1_MspInit+0xc4>)
 8000bb2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <SPI1_MspInit+0xc4>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <SPI1_MspInit+0xc4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	4a25      	ldr	r2, [pc, #148]	@ (8000c64 <SPI1_MspInit+0xc4>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd4:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <SPI1_MspInit+0xc4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <SPI1_MspInit+0xc4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c64 <SPI1_MspInit+0xc4>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <SPI1_MspInit+0xc4>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000bfc:	2340      	movs	r3, #64	@ 0x40
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000c0c:	2305      	movs	r3, #5
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4814      	ldr	r0, [pc, #80]	@ (8000c68 <SPI1_MspInit+0xc8>)
 8000c18:	f000 fd48 	bl	80016ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <SPI1_MspInit+0xc8>)
 8000c38:	f000 fd38 	bl	80016ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <SPI1_MspInit+0xcc>)
 8000c58:	f000 fd28 	bl	80016ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	@ 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400

08000c70 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, ((uint8_t *)&ch), 1, 10);
 8000c78:	1d39      	adds	r1, r7, #4
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <__io_putchar+0x20>)
 8000c80:	f001 ffe8 	bl	8002c54 <HAL_UART_Transmit>

	return ch;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200001f0 	.word	0x200001f0

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f000 fadc 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f822 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f000 f8b2 	bl	8000e08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ca4:	f000 f886 	bl	8000db4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* 1. Enable BLE module */
  bluenrg_init();
 8000ca8:	f7ff fe4e 	bl	8000948 <bluenrg_init>
  printf("Initialization successful..\n\r");
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <main+0x48>)
 8000cae:	f003 fb0b 	bl	80042c8 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bluenrg_process();
 8000cb2:	f7ff febd 	bl	8000a30 <bluenrg_process>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <main+0x4c>)
 8000cbc:	f000 ff76 	bl	8001bac <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	f000 fb39 	bl	8001338 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2120      	movs	r1, #32
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <main+0x4c>)
 8000ccc:	f000 ff6e 	bl	8001bac <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000cd0:	2064      	movs	r0, #100	@ 0x64
 8000cd2:	f000 fb31 	bl	8001338 <HAL_Delay>
	  bluenrg_process();
 8000cd6:	bf00      	nop
 8000cd8:	e7eb      	b.n	8000cb2 <main+0x1e>
 8000cda:	bf00      	nop
 8000cdc:	0800514c 	.word	0x0800514c
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	@ 0x50
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2230      	movs	r2, #48	@ 0x30
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fc30 	bl	8004558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <SystemClock_Config+0xc8>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	4a26      	ldr	r2, [pc, #152]	@ (8000dac <SystemClock_Config+0xc8>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d18:	4b24      	ldr	r3, [pc, #144]	@ (8000dac <SystemClock_Config+0xc8>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <SystemClock_Config+0xcc>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a20      	ldr	r2, [pc, #128]	@ (8000db0 <SystemClock_Config+0xcc>)
 8000d2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <SystemClock_Config+0xcc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d54:	2308      	movs	r3, #8
 8000d56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000d58:	2340      	movs	r3, #64	@ 0x40
 8000d5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d60:	2304      	movs	r3, #4
 8000d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 ff5d 	bl	8001c28 <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d74:	f000 f8d6 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 f9bf 	bl	8002118 <HAL_RCC_ClockConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000da0:	f000 f8c0 	bl	8000f24 <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3750      	adds	r7, #80	@ 0x50
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40007000 	.word	0x40007000

08000db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <MX_USART2_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_USART2_UART_Init+0x4c>)
 8000dec:	f001 fee2 	bl	8002bb4 <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000df6:	f000 f895 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200001f0 	.word	0x200001f0
 8000e04:	40004400 	.word	0x40004400

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b3d      	ldr	r3, [pc, #244]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a3c      	ldr	r2, [pc, #240]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b36      	ldr	r3, [pc, #216]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a35      	ldr	r2, [pc, #212]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b33      	ldr	r3, [pc, #204]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a27      	ldr	r2, [pc, #156]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <MX_GPIO_Init+0x110>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000e94:	4821      	ldr	r0, [pc, #132]	@ (8000f1c <MX_GPIO_Init+0x114>)
 8000e96:	f000 fe89 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481b      	ldr	r0, [pc, #108]	@ (8000f20 <MX_GPIO_Init+0x118>)
 8000eb2:	f000 fbfb 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <MX_GPIO_Init+0x114>)
 8000ecc:	f000 fbee 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8000ed0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <MX_GPIO_Init+0x114>)
 8000eea:	f000 fbdf 	bl	80016ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2006      	movs	r0, #6
 8000ef4:	f000 fb43 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ef8:	2006      	movs	r0, #6
 8000efa:	f000 fb5c 	bl	80015b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2028      	movs	r0, #40	@ 0x28
 8000f04:	f000 fb3b 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f08:	2028      	movs	r0, #40	@ 0x28
 8000f0a:	f000 fb54 	bl	80015b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40020800 	.word	0x40020800

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	@ (8001004 <HAL_UART_MspInit+0x84>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12b      	bne.n	8000ffa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fea:	2307      	movs	r3, #7
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	@ (800100c <HAL_UART_MspInit+0x8c>)
 8000ff6:	f000 fb59 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	@ 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40004400 	.word	0x40004400
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <NMI_Handler+0x4>

08001018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <MemManage_Handler+0x4>

08001028 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <UsageFault_Handler+0x4>

08001038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001066:	f000 f947 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <EXTI0_IRQHandler+0x10>)
 8001076:	f000 faf5 	bl	8001664 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000008c 	.word	0x2000008c

08001084 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001088:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800108c:	f000 fda8 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	4601      	mov	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
  }

  return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e009      	b.n	80010f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fdc1 	bl	8000c70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf1      	blt.n	80010e0 <_write+0x12>
  }
  return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_close>:

int _close(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800112e:	605a      	str	r2, [r3, #4]
  return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_isatty>:

int _isatty(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f003 fa28 	bl	80045f4 <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20020000 	.word	0x20020000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	20000238 	.word	0x20000238
 80011d8:	20000938 	.word	0x20000938

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001238 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001204:	f7ff ffea 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	@ (8001240 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	@ (800124c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f003 f9e7 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fd2f 	bl	8000c94 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001244:	080051c8 	.word	0x080051c8
  ldr r2, =_sbss
 8001248:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800124c:	20000934 	.word	0x20000934

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	@ (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f973 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	200f      	movs	r0, #15
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fe52 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f999 	bl	80015ee <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f953 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000010 	.word	0x20000010
 80012f4:	2000000c 	.word	0x2000000c

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000010 	.word	0x20000010
 800131c:	2000023c 	.word	0x2000023c

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2000023c 	.word	0x2000023c

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ffee 	bl	8001320 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_Delay+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffde 	bl	8001320 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000010 	.word	0x20000010

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4907      	ldr	r1, [pc, #28]	@ (800141c <__NVIC_EnableIRQ+0x38>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db12      	blt.n	8001458 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	490a      	ldr	r1, [pc, #40]	@ (8001464 <__NVIC_DisableIRQ+0x44>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	3320      	adds	r3, #32
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800144c:	f3bf 8f4f 	dsb	sy
}
 8001450:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001452:	f3bf 8f6f 	isb	sy
}
 8001456:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	@ (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	@ 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff05 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff1a 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff0d 	bl	80013e4 <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff1d 	bl	8001420 <__NVIC_DisableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff94 	bl	8001524 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001606:	b480      	push	{r7}
 8001608:	b087      	sub	sp, #28
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	460b      	mov	r3, r1
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	605a      	str	r2, [r3, #4]
      break;
 8001624:	e002      	b.n	800162c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
      break;
 800162a:	bf00      	nop
  }

  return status;
 800162c:	7dfb      	ldrb	r3, [r7, #23]
}
 800162e:	4618      	mov	r0, r3
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e003      	b.n	8001656 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001654:	2300      	movs	r3, #0
  }
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	2201      	movs	r2, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_EXTI_IRQHandler+0x44>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800168c:	4a06      	ldr	r2, [pc, #24]	@ (80016a8 <HAL_EXTI_IRQHandler+0x44>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4798      	blx	r3
    }
  }
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013c00 	.word	0x40013c00

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	e159      	b.n	800197c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c8:	2201      	movs	r2, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	f040 8148 	bne.w	8001976 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d005      	beq.n	80016fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d130      	bne.n	8001760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 0201 	and.w	r2, r3, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b03      	cmp	r3, #3
 800176a:	d017      	beq.n	800179c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d123      	bne.n	80017f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	08da      	lsrs	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3208      	adds	r2, #8
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a2 	beq.w	8001976 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b57      	ldr	r3, [pc, #348]	@ (8001994 <HAL_GPIO_Init+0x2e8>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	4a56      	ldr	r2, [pc, #344]	@ (8001994 <HAL_GPIO_Init+0x2e8>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44
 8001842:	4b54      	ldr	r3, [pc, #336]	@ (8001994 <HAL_GPIO_Init+0x2e8>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184e:	4a52      	ldr	r2, [pc, #328]	@ (8001998 <HAL_GPIO_Init+0x2ec>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a49      	ldr	r2, [pc, #292]	@ (800199c <HAL_GPIO_Init+0x2f0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x202>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a48      	ldr	r2, [pc, #288]	@ (80019a0 <HAL_GPIO_Init+0x2f4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x1fe>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a47      	ldr	r2, [pc, #284]	@ (80019a4 <HAL_GPIO_Init+0x2f8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x1fa>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a46      	ldr	r2, [pc, #280]	@ (80019a8 <HAL_GPIO_Init+0x2fc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x1f6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a45      	ldr	r2, [pc, #276]	@ (80019ac <HAL_GPIO_Init+0x300>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x1f2>
 800189a:	2304      	movs	r3, #4
 800189c:	e008      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 800189e:	2307      	movs	r3, #7
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018ae:	2300      	movs	r3, #0
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f002 0203 	and.w	r2, r2, #3
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4093      	lsls	r3, r2
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c0:	4935      	ldr	r1, [pc, #212]	@ (8001998 <HAL_GPIO_Init+0x2ec>)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ce:	4b38      	ldr	r3, [pc, #224]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018f2:	4a2f      	ldr	r2, [pc, #188]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f8:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800191c:	4a24      	ldr	r2, [pc, #144]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001922:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001946:	4a1a      	ldr	r2, [pc, #104]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194c:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001970:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <HAL_GPIO_Init+0x304>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b0f      	cmp	r3, #15
 8001980:	f67f aea2 	bls.w	80016c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40013800 	.word	0x40013800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020c00 	.word	0x40020c00
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40013c00 	.word	0x40013c00

080019b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e0bb      	b.n	8001b48 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	f040 80ab 	bne.w	8001b42 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80019ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001b60 <HAL_GPIO_DeInit+0x1ac>)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a54      	ldr	r2, [pc, #336]	@ (8001b64 <HAL_GPIO_DeInit+0x1b0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_DeInit+0x96>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a53      	ldr	r2, [pc, #332]	@ (8001b68 <HAL_GPIO_DeInit+0x1b4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_DeInit+0x92>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	@ (8001b6c <HAL_GPIO_DeInit+0x1b8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_DeInit+0x8e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a51      	ldr	r2, [pc, #324]	@ (8001b70 <HAL_GPIO_DeInit+0x1bc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_DeInit+0x8a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a50      	ldr	r2, [pc, #320]	@ (8001b74 <HAL_GPIO_DeInit+0x1c0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_DeInit+0x86>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e008      	b.n	8001a4c <HAL_GPIO_DeInit+0x98>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_DeInit+0x98>
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_DeInit+0x98>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_DeInit+0x98>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_DeInit+0x98>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	f002 0203 	and.w	r2, r2, #3
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	4093      	lsls	r3, r2
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d132      	bne.n	8001ac2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001a5c:	4b46      	ldr	r3, [pc, #280]	@ (8001b78 <HAL_GPIO_DeInit+0x1c4>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4944      	ldr	r1, [pc, #272]	@ (8001b78 <HAL_GPIO_DeInit+0x1c4>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001a6a:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <HAL_GPIO_DeInit+0x1c4>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4941      	ldr	r1, [pc, #260]	@ (8001b78 <HAL_GPIO_DeInit+0x1c4>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001a78:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <HAL_GPIO_DeInit+0x1c4>)
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	493d      	ldr	r1, [pc, #244]	@ (8001b78 <HAL_GPIO_DeInit+0x1c4>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_GPIO_DeInit+0x1c4>)
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	493a      	ldr	r1, [pc, #232]	@ (8001b78 <HAL_GPIO_DeInit+0x1c4>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8001b60 <HAL_GPIO_DeInit+0x1ac>)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	482a      	ldr	r0, [pc, #168]	@ (8001b60 <HAL_GPIO_DeInit+0x1ac>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	400a      	ands	r2, r1
 8001abc:	3302      	adds	r3, #2
 8001abe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2103      	movs	r1, #3
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	08d2      	lsrs	r2, r2, #3
 8001af8:	4019      	ands	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	401a      	ands	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2103      	movs	r1, #3
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	f67f af40 	bls.w	80019d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40013c00 	.word	0x40013c00

08001b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f806 	bl	8001c10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e267      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d075      	beq.n	8001d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c46:	4b88      	ldr	r3, [pc, #544]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d00c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4b85      	ldr	r3, [pc, #532]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5e:	4b82      	ldr	r3, [pc, #520]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c6a:	d10b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x108>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d157      	bne.n	8001d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e242      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x74>
 8001c8e:	4b76      	ldr	r3, [pc, #472]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a75      	ldr	r2, [pc, #468]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca6:	4b70      	ldr	r3, [pc, #448]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6f      	ldr	r2, [pc, #444]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6c      	ldr	r2, [pc, #432]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001cc0:	4b69      	ldr	r3, [pc, #420]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a68      	ldr	r2, [pc, #416]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b66      	ldr	r3, [pc, #408]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a65      	ldr	r2, [pc, #404]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb1e 	bl	8001320 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fb1a 	bl	8001320 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e207      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xc0>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fb0a 	bl	8001320 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fb06 	bl	8001320 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1f3      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b51      	ldr	r3, [pc, #324]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0xe8>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d063      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4a:	4b47      	ldr	r3, [pc, #284]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d56:	4b44      	ldr	r3, [pc, #272]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x152>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1c7      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4937      	ldr	r1, [pc, #220]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	e03a      	b.n	8001e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d98:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCC_OscConfig+0x244>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fabf 	bl	8001320 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff fabb 	bl	8001320 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1a8      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4925      	ldr	r1, [pc, #148]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <HAL_RCC_OscConfig+0x244>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff fa9e 	bl	8001320 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de8:	f7ff fa9a 	bl	8001320 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e187      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d036      	beq.n	8001e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d016      	beq.n	8001e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_RCC_OscConfig+0x248>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff fa7e 	bl	8001320 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff fa7a 	bl	8001320 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e167      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x200>
 8001e46:	e01b      	b.n	8001e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_RCC_OscConfig+0x248>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fa67 	bl	8001320 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	e00e      	b.n	8001e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e56:	f7ff fa63 	bl	8001320 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d907      	bls.n	8001e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e150      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	42470000 	.word	0x42470000
 8001e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	4b88      	ldr	r3, [pc, #544]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ea      	bne.n	8001e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8097 	beq.w	8001fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b81      	ldr	r3, [pc, #516]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10f      	bne.n	8001ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a7c      	ldr	r2, [pc, #496]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b7a      	ldr	r3, [pc, #488]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	4b77      	ldr	r3, [pc, #476]	@ (800209c <HAL_RCC_OscConfig+0x474>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d118      	bne.n	8001efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eca:	4b74      	ldr	r3, [pc, #464]	@ (800209c <HAL_RCC_OscConfig+0x474>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a73      	ldr	r2, [pc, #460]	@ (800209c <HAL_RCC_OscConfig+0x474>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fa23 	bl	8001320 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ede:	f7ff fa1f 	bl	8001320 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e10c      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800209c <HAL_RCC_OscConfig+0x474>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x2ea>
 8001f04:	4b64      	ldr	r3, [pc, #400]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f08:	4a63      	ldr	r2, [pc, #396]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f10:	e01c      	b.n	8001f4c <HAL_RCC_OscConfig+0x324>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x30c>
 8001f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f26:	4b5c      	ldr	r3, [pc, #368]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0x324>
 8001f34:	4b58      	ldr	r3, [pc, #352]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	4a57      	ldr	r2, [pc, #348]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f40:	4b55      	ldr	r3, [pc, #340]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f44:	4a54      	ldr	r2, [pc, #336]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f46:	f023 0304 	bic.w	r3, r3, #4
 8001f4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff f9e4 	bl	8001320 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f9e0 	bl	8001320 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0cb      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	4b49      	ldr	r3, [pc, #292]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ee      	beq.n	8001f5c <HAL_RCC_OscConfig+0x334>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7ff f9ce 	bl	8001320 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7ff f9ca 	bl	8001320 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0b5      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ee      	bne.n	8001f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb0:	4b39      	ldr	r3, [pc, #228]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	4a38      	ldr	r2, [pc, #224]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80a1 	beq.w	8002108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc6:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d05c      	beq.n	800208c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d141      	bne.n	800205e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <HAL_RCC_OscConfig+0x478>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f99e 	bl	8001320 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7ff f99a 	bl	8001320 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e087      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffa:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	019b      	lsls	r3, r3, #6
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	3b01      	subs	r3, #1
 8002020:	041b      	lsls	r3, r3, #16
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	061b      	lsls	r3, r3, #24
 800202a:	491b      	ldr	r1, [pc, #108]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <HAL_RCC_OscConfig+0x478>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff f973 	bl	8001320 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff f96f 	bl	8001320 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e05c      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x416>
 800205c:	e054      	b.n	8002108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <HAL_RCC_OscConfig+0x478>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff f95c 	bl	8001320 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff f958 	bl	8001320 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e045      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x444>
 800208a:	e03d      	b.n	8002108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e038      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
 8002098:	40023800 	.word	0x40023800
 800209c:	40007000 	.word	0x40007000
 80020a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x4ec>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d028      	beq.n	8002104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d121      	bne.n	8002104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d11a      	bne.n	8002104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020d4:	4013      	ands	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020dc:	4293      	cmp	r3, r2
 80020de:	d111      	bne.n	8002104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	3b01      	subs	r3, #1
 80020ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800

08002118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0cc      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b68      	ldr	r3, [pc, #416]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d90c      	bls.n	8002154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b65      	ldr	r3, [pc, #404]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b63      	ldr	r3, [pc, #396]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b8      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800216c:	4b59      	ldr	r3, [pc, #356]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a58      	ldr	r2, [pc, #352]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002184:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a52      	ldr	r2, [pc, #328]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800218e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b50      	ldr	r3, [pc, #320]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	494d      	ldr	r1, [pc, #308]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d044      	beq.n	8002238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d119      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b3f      	ldr	r3, [pc, #252]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e067      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b37      	ldr	r3, [pc, #220]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4934      	ldr	r1, [pc, #208]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7ff f88a 	bl	8001320 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7ff f886 	bl	8001320 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b2b      	ldr	r3, [pc, #172]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 020c 	and.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d20c      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e032      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4916      	ldr	r1, [pc, #88]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228a:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	490e      	ldr	r1, [pc, #56]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800229e:	f000 f821 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	490a      	ldr	r1, [pc, #40]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	5ccb      	ldrb	r3, [r1, r3]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	4a09      	ldr	r2, [pc, #36]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ba:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe ffea 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00
 80022d4:	40023800 	.word	0x40023800
 80022d8:	0800516c 	.word	0x0800516c
 80022dc:	20000008 	.word	0x20000008
 80022e0:	2000000c 	.word	0x2000000c

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e8:	b094      	sub	sp, #80	@ 0x50
 80022ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f0:	2300      	movs	r3, #0
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f4:	2300      	movs	r3, #0
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fc:	4b79      	ldr	r3, [pc, #484]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d00d      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x40>
 8002308:	2b08      	cmp	r3, #8
 800230a:	f200 80e1 	bhi.w	80024d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x34>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x3a>
 8002316:	e0db      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b73      	ldr	r3, [pc, #460]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800231a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800231c:	e0db      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231e:	4b73      	ldr	r3, [pc, #460]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002320:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002322:	e0d8      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002324:	4b6f      	ldr	r3, [pc, #444]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800232c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232e:	4b6d      	ldr	r3, [pc, #436]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	2200      	movs	r2, #0
 8002342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002344:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234c:	633b      	str	r3, [r7, #48]	@ 0x30
 800234e:	2300      	movs	r3, #0
 8002350:	637b      	str	r3, [r7, #52]	@ 0x34
 8002352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002356:	4622      	mov	r2, r4
 8002358:	462b      	mov	r3, r5
 800235a:	f04f 0000 	mov.w	r0, #0
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	0159      	lsls	r1, r3, #5
 8002364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002368:	0150      	lsls	r0, r2, #5
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4621      	mov	r1, r4
 8002370:	1a51      	subs	r1, r2, r1
 8002372:	6139      	str	r1, [r7, #16]
 8002374:	4629      	mov	r1, r5
 8002376:	eb63 0301 	sbc.w	r3, r3, r1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002388:	4659      	mov	r1, fp
 800238a:	018b      	lsls	r3, r1, #6
 800238c:	4651      	mov	r1, sl
 800238e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002392:	4651      	mov	r1, sl
 8002394:	018a      	lsls	r2, r1, #6
 8002396:	4651      	mov	r1, sl
 8002398:	ebb2 0801 	subs.w	r8, r2, r1
 800239c:	4659      	mov	r1, fp
 800239e:	eb63 0901 	sbc.w	r9, r3, r1
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b6:	4690      	mov	r8, r2
 80023b8:	4699      	mov	r9, r3
 80023ba:	4623      	mov	r3, r4
 80023bc:	eb18 0303 	adds.w	r3, r8, r3
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	462b      	mov	r3, r5
 80023c4:	eb49 0303 	adc.w	r3, r9, r3
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023d6:	4629      	mov	r1, r5
 80023d8:	024b      	lsls	r3, r1, #9
 80023da:	4621      	mov	r1, r4
 80023dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023e0:	4621      	mov	r1, r4
 80023e2:	024a      	lsls	r2, r1, #9
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ea:	2200      	movs	r2, #0
 80023ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023f4:	f7fd ff4c 	bl	8000290 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4613      	mov	r3, r2
 80023fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002400:	e058      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002402:	4b38      	ldr	r3, [pc, #224]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	2200      	movs	r2, #0
 800240a:	4618      	mov	r0, r3
 800240c:	4611      	mov	r1, r2
 800240e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
 8002418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800241c:	4642      	mov	r2, r8
 800241e:	464b      	mov	r3, r9
 8002420:	f04f 0000 	mov.w	r0, #0
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	0159      	lsls	r1, r3, #5
 800242a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800242e:	0150      	lsls	r0, r2, #5
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4641      	mov	r1, r8
 8002436:	ebb2 0a01 	subs.w	sl, r2, r1
 800243a:	4649      	mov	r1, r9
 800243c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800244c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002454:	ebb2 040a 	subs.w	r4, r2, sl
 8002458:	eb63 050b 	sbc.w	r5, r3, fp
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	00eb      	lsls	r3, r5, #3
 8002466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800246a:	00e2      	lsls	r2, r4, #3
 800246c:	4614      	mov	r4, r2
 800246e:	461d      	mov	r5, r3
 8002470:	4643      	mov	r3, r8
 8002472:	18e3      	adds	r3, r4, r3
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	464b      	mov	r3, r9
 8002478:	eb45 0303 	adc.w	r3, r5, r3
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800248a:	4629      	mov	r1, r5
 800248c:	028b      	lsls	r3, r1, #10
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002494:	4621      	mov	r1, r4
 8002496:	028a      	lsls	r2, r1, #10
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800249e:	2200      	movs	r2, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	61fa      	str	r2, [r7, #28]
 80024a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a8:	f7fd fef2 	bl	8000290 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4613      	mov	r3, r2
 80024b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80024c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024ce:	e002      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3750      	adds	r7, #80	@ 0x50
 80024dc:	46bd      	mov	sp, r7
 80024de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	00f42400 	.word	0x00f42400
 80024ec:	007a1200 	.word	0x007a1200

080024f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000008 	.word	0x20000008

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800250c:	f7ff fff0 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	0a9b      	lsrs	r3, r3, #10
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4903      	ldr	r1, [pc, #12]	@ (800252c <HAL_RCC_GetPCLK1Freq+0x24>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	0800517c 	.word	0x0800517c

08002530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002534:	f7ff ffdc 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	0b5b      	lsrs	r3, r3, #13
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4903      	ldr	r1, [pc, #12]	@ (8002554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	0800517c 	.word	0x0800517c

08002558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07b      	b.n	8002662 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800257a:	d009      	beq.n	8002590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
 8002582:	e005      	b.n	8002590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f85d 	bl	800266a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002614:	ea42 0103 	orr.w	r1, r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0104 	and.w	r1, r3, #4
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	f003 0210 	and.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002650:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b08c      	sub	sp, #48	@ 0x30
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800268c:	2301      	movs	r3, #1
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_SPI_TransmitReceive+0x26>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e198      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x358>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ac:	f7fe fe38 	bl	8001320 <HAL_GetTick>
 80026b0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d00f      	beq.n	80026ee <HAL_SPI_TransmitReceive+0x70>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026d4:	d107      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x68>
 80026de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d003      	beq.n	80026ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80026ec:	e16d      	b.n	80029ca <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_SPI_TransmitReceive+0x82>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_SPI_TransmitReceive+0x82>
 80026fa:	887b      	ldrh	r3, [r7, #2]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002706:	e160      	b.n	80029ca <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b04      	cmp	r3, #4
 8002712:	d003      	beq.n	800271c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2205      	movs	r2, #5
 8002718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	887a      	ldrh	r2, [r7, #2]
 8002732:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	887a      	ldrh	r2, [r7, #2]
 800273e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275c:	2b40      	cmp	r3, #64	@ 0x40
 800275e:	d007      	beq.n	8002770 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002778:	d17c      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_SPI_TransmitReceive+0x10a>
 8002782:	8b7b      	ldrh	r3, [r7, #26]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d16a      	bne.n	800285e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	1c9a      	adds	r2, r3, #2
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ac:	e057      	b.n	800285e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d11b      	bne.n	80027f4 <HAL_SPI_TransmitReceive+0x176>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <HAL_SPI_TransmitReceive+0x176>
 80027c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d113      	bne.n	80027f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	881a      	ldrh	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	1c9a      	adds	r2, r3, #2
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d119      	bne.n	8002836 <HAL_SPI_TransmitReceive+0x1b8>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d014      	beq.n	8002836 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	b292      	uxth	r2, r2
 8002818:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281e:	1c9a      	adds	r2, r3, #2
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002832:	2301      	movs	r3, #1
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002836:	f7fe fd73 	bl	8001320 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002842:	429a      	cmp	r2, r3
 8002844:	d80b      	bhi.n	800285e <HAL_SPI_TransmitReceive+0x1e0>
 8002846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d007      	beq.n	800285e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800285c:	e0b5      	b.n	80029ca <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1a2      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x130>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d19d      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x130>
 8002872:	e080      	b.n	8002976 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_SPI_TransmitReceive+0x204>
 800287c:	8b7b      	ldrh	r3, [r7, #26]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d16f      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a8:	e05b      	b.n	8002962 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d11c      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x274>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d017      	beq.n	80028f2 <HAL_SPI_TransmitReceive+0x274>
 80028c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d114      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d119      	bne.n	8002934 <HAL_SPI_TransmitReceive+0x2b6>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d014      	beq.n	8002934 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002930:	2301      	movs	r3, #1
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002934:	f7fe fcf4 	bl	8001320 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002940:	429a      	cmp	r2, r3
 8002942:	d803      	bhi.n	800294c <HAL_SPI_TransmitReceive+0x2ce>
 8002944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d102      	bne.n	8002952 <HAL_SPI_TransmitReceive+0x2d4>
 800294c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294e:	2b00      	cmp	r3, #0
 8002950:	d107      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002960:	e033      	b.n	80029ca <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d19e      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x22c>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d199      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f8c6 	bl	8002b0c <SPI_EndRxTxTransaction>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002992:	e01a      	b.n	80029ca <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029c0:	e003      	b.n	80029ca <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80029d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3730      	adds	r7, #48	@ 0x30
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029ec:	b2db      	uxtb	r3, r3
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a0c:	f7fe fc88 	bl	8001320 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a1c:	f7fe fc80 	bl	8001320 <HAL_GetTick>
 8002a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a22:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	015b      	lsls	r3, r3, #5
 8002a28:	0d1b      	lsrs	r3, r3, #20
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a32:	e054      	b.n	8002ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d050      	beq.n	8002ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a3c:	f7fe fc70 	bl	8001320 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d902      	bls.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d13d      	bne.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a6a:	d111      	bne.n	8002a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a74:	d004      	beq.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7e:	d107      	bne.n	8002a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a98:	d10f      	bne.n	8002aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e017      	b.n	8002afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d19b      	bne.n	8002a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000008 	.word	0x20000008

08002b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2102      	movs	r1, #2
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff ff6a 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e032      	b.n	8002ba4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <SPI_EndRxTxTransaction+0xa0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb0 <SPI_EndRxTxTransaction+0xa4>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	0d5b      	lsrs	r3, r3, #21
 8002b4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b5c:	d112      	bne.n	8002b84 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2180      	movs	r1, #128	@ 0x80
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff ff47 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d016      	beq.n	8002ba2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e00f      	b.n	8002ba4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9a:	2b80      	cmp	r3, #128	@ 0x80
 8002b9c:	d0f2      	beq.n	8002b84 <SPI_EndRxTxTransaction+0x78>
 8002b9e:	e000      	b.n	8002ba2 <SPI_EndRxTxTransaction+0x96>
        break;
 8002ba0:	bf00      	nop
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000008 	.word	0x20000008
 8002bb0:	165e9f81 	.word	0x165e9f81

08002bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e042      	b.n	8002c4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe f9d0 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	@ 0x24
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f973 	bl	8002ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	@ 0x28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d175      	bne.n	8002d60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_UART_Transmit+0x2c>
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e06e      	b.n	8002d62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2221      	movs	r2, #33	@ 0x21
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c92:	f7fe fb45 	bl	8001320 <HAL_GetTick>
 8002c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cac:	d108      	bne.n	8002cc0 <HAL_UART_Transmit+0x6c>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	e003      	b.n	8002cc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cc8:	e02e      	b.n	8002d28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2180      	movs	r1, #128	@ 0x80
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f848 	bl	8002d6a <UART_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e03a      	b.n	8002d62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3302      	adds	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e007      	b.n	8002d1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1cb      	bne.n	8002cca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	@ 0x40
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f814 	bl	8002d6a <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e006      	b.n	8002d62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7a:	e03b      	b.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d037      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7fe facc 	bl	8001320 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	6a3a      	ldr	r2, [r7, #32]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e03a      	b.n	8002e14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d023      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b80      	cmp	r3, #128	@ 0x80
 8002db0:	d020      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b40      	cmp	r3, #64	@ 0x40
 8002db6:	d01d      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d116      	bne.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f81d 	bl	8002e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2208      	movs	r2, #8
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e00f      	b.n	8002e14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d0b4      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b095      	sub	sp, #84	@ 0x54
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2e:	e853 3f00 	ldrex	r3, [r3]
 8002e32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e44:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e4c:	e841 2300 	strex	r3, r2, [r1]
 8002e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e5      	bne.n	8002e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3314      	adds	r3, #20
 8002e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3314      	adds	r3, #20
 8002e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e5      	bne.n	8002e58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d119      	bne.n	8002ec8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 0310 	bic.w	r3, r3, #16
 8002eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eb4:	61ba      	str	r2, [r7, #24]
 8002eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb8:	6979      	ldr	r1, [r7, #20]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	e841 2300 	strex	r3, r2, [r1]
 8002ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e5      	bne.n	8002e94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ed6:	bf00      	nop
 8002ed8:	3754      	adds	r7, #84	@ 0x54
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b0c0      	sub	sp, #256	@ 0x100
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	ea40 0301 	orr.w	r3, r0, r1
 8002f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f3c:	f021 010c 	bic.w	r1, r1, #12
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5e:	6999      	ldr	r1, [r3, #24]
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	ea40 0301 	orr.w	r3, r0, r1
 8002f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b8f      	ldr	r3, [pc, #572]	@ (80031b0 <UART_SetConfig+0x2cc>)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d005      	beq.n	8002f84 <UART_SetConfig+0xa0>
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80031b4 <UART_SetConfig+0x2d0>)
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d104      	bne.n	8002f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff fad4 	bl	8002530 <HAL_RCC_GetPCLK2Freq>
 8002f88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f8c:	e003      	b.n	8002f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f8e:	f7ff fabb 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8002f92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa0:	f040 810c 	bne.w	80031bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	eb12 0801 	adds.w	r8, r2, r1
 8002fcc:	4629      	mov	r1, r5
 8002fce:	eb43 0901 	adc.w	r9, r3, r1
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe6:	4690      	mov	r8, r2
 8002fe8:	4699      	mov	r9, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	eb18 0303 	adds.w	r3, r8, r3
 8002ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb49 0303 	adc.w	r3, r9, r3
 8002ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800300a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800300e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003012:	460b      	mov	r3, r1
 8003014:	18db      	adds	r3, r3, r3
 8003016:	653b      	str	r3, [r7, #80]	@ 0x50
 8003018:	4613      	mov	r3, r2
 800301a:	eb42 0303 	adc.w	r3, r2, r3
 800301e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003028:	f7fd f932 	bl	8000290 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4b61      	ldr	r3, [pc, #388]	@ (80031b8 <UART_SetConfig+0x2d4>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	011c      	lsls	r4, r3, #4
 800303a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003044:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003054:	415b      	adcs	r3, r3
 8003056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800305c:	4641      	mov	r1, r8
 800305e:	eb12 0a01 	adds.w	sl, r2, r1
 8003062:	4649      	mov	r1, r9
 8003064:	eb43 0b01 	adc.w	fp, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307c:	4692      	mov	sl, r2
 800307e:	469b      	mov	fp, r3
 8003080:	4643      	mov	r3, r8
 8003082:	eb1a 0303 	adds.w	r3, sl, r3
 8003086:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800308a:	464b      	mov	r3, r9
 800308c:	eb4b 0303 	adc.w	r3, fp, r3
 8003090:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030be:	f7fd f8e7 	bl	8000290 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	4b3b      	ldr	r3, [pc, #236]	@ (80031b8 <UART_SetConfig+0x2d4>)
 80030ca:	fba3 2301 	umull	r2, r3, r3, r1
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2264      	movs	r2, #100	@ 0x64
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	1acb      	subs	r3, r1, r3
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030de:	4b36      	ldr	r3, [pc, #216]	@ (80031b8 <UART_SetConfig+0x2d4>)
 80030e0:	fba3 2302 	umull	r2, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030ec:	441c      	add	r4, r3
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003108:	415b      	adcs	r3, r3
 800310a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800310c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6339      	str	r1, [r7, #48]	@ 0x30
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	637b      	str	r3, [r7, #52]	@ 0x34
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003144:	464b      	mov	r3, r9
 8003146:	460a      	mov	r2, r1
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800315c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003164:	460b      	mov	r3, r1
 8003166:	18db      	adds	r3, r3, r3
 8003168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800316a:	4613      	mov	r3, r2
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800317a:	f7fd f889 	bl	8000290 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <UART_SetConfig+0x2d4>)
 8003184:	fba3 1302 	umull	r1, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2164      	movs	r1, #100	@ 0x64
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	3332      	adds	r3, #50	@ 0x32
 8003196:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <UART_SetConfig+0x2d4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4422      	add	r2, r4
 80031aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ac:	e106      	b.n	80033bc <UART_SetConfig+0x4d8>
 80031ae:	bf00      	nop
 80031b0:	40011000 	.word	0x40011000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	1891      	adds	r1, r2, r2
 80031d4:	6239      	str	r1, [r7, #32]
 80031d6:	415b      	adcs	r3, r3
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031de:	4641      	mov	r1, r8
 80031e0:	1854      	adds	r4, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb43 0501 	adc.w	r5, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	00eb      	lsls	r3, r5, #3
 80031f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f6:	00e2      	lsls	r2, r4, #3
 80031f8:	4614      	mov	r4, r2
 80031fa:	461d      	mov	r5, r3
 80031fc:	4643      	mov	r3, r8
 80031fe:	18e3      	adds	r3, r4, r3
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003204:	464b      	mov	r3, r9
 8003206:	eb45 0303 	adc.w	r3, r5, r3
 800320a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800321a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800322a:	4629      	mov	r1, r5
 800322c:	008b      	lsls	r3, r1, #2
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003234:	4621      	mov	r1, r4
 8003236:	008a      	lsls	r2, r1, #2
 8003238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800323c:	f7fd f828 	bl	8000290 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4b60      	ldr	r3, [pc, #384]	@ (80033c8 <UART_SetConfig+0x4e4>)
 8003246:	fba3 2302 	umull	r2, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	011c      	lsls	r4, r3, #4
 800324e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003258:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800325c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	61b9      	str	r1, [r7, #24]
 8003268:	415b      	adcs	r3, r3
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003270:	4641      	mov	r1, r8
 8003272:	1851      	adds	r1, r2, r1
 8003274:	6139      	str	r1, [r7, #16]
 8003276:	4649      	mov	r1, r9
 8003278:	414b      	adcs	r3, r1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003288:	4659      	mov	r1, fp
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4651      	mov	r1, sl
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4651      	mov	r1, sl
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4642      	mov	r2, r8
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032a4:	464b      	mov	r3, r9
 80032a6:	460a      	mov	r2, r1
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032c8:	4649      	mov	r1, r9
 80032ca:	008b      	lsls	r3, r1, #2
 80032cc:	4641      	mov	r1, r8
 80032ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d2:	4641      	mov	r1, r8
 80032d4:	008a      	lsls	r2, r1, #2
 80032d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032da:	f7fc ffd9 	bl	8000290 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	4b38      	ldr	r3, [pc, #224]	@ (80033c8 <UART_SetConfig+0x4e4>)
 80032e6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2264      	movs	r2, #100	@ 0x64
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	1acb      	subs	r3, r1, r3
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3332      	adds	r3, #50	@ 0x32
 80032f8:	4a33      	ldr	r2, [pc, #204]	@ (80033c8 <UART_SetConfig+0x4e4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003304:	441c      	add	r4, r3
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	673b      	str	r3, [r7, #112]	@ 0x70
 800330e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003310:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	415b      	adcs	r3, r3
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003324:	4641      	mov	r1, r8
 8003326:	1851      	adds	r1, r2, r1
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	4649      	mov	r1, r9
 800332c:	414b      	adcs	r3, r1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800333c:	4659      	mov	r1, fp
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4651      	mov	r1, sl
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4642      	mov	r2, r8
 8003352:	189b      	adds	r3, r3, r2
 8003354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003356:	464b      	mov	r3, r9
 8003358:	460a      	mov	r2, r1
 800335a:	eb42 0303 	adc.w	r3, r2, r3
 800335e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	663b      	str	r3, [r7, #96]	@ 0x60
 800336a:	667a      	str	r2, [r7, #100]	@ 0x64
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003378:	4649      	mov	r1, r9
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	4641      	mov	r1, r8
 800337e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003382:	4641      	mov	r1, r8
 8003384:	008a      	lsls	r2, r1, #2
 8003386:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800338a:	f7fc ff81 	bl	8000290 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <UART_SetConfig+0x4e4>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	@ 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	3332      	adds	r3, #50	@ 0x32
 80033a6:	4a08      	ldr	r2, [pc, #32]	@ (80033c8 <UART_SetConfig+0x4e4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4422      	add	r2, r4
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033c2:	46bd      	mov	sp, r7
 80033c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c8:	51eb851f 	.word	0x51eb851f

080033cc <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80033d6:	f107 0308 	add.w	r3, r7, #8
 80033da:	2218      	movs	r2, #24
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 f8ba 	bl	8004558 <memset>
  rq.ogf = 0x03;
 80033e4:	2303      	movs	r3, #3
 80033e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80033e8:	2303      	movs	r3, #3
 80033ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80033ec:	1dfb      	adds	r3, r7, #7
 80033ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80033f0:	2301      	movs	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80033f4:	f107 0308 	add.w	r3, r7, #8
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fc26 	bl	8003c4c <hci_send_req>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	da01      	bge.n	800340a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003406:	23ff      	movs	r3, #255	@ 0xff
 8003408:	e005      	b.n	8003416 <hci_reset+0x4a>
  if (status) {
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <hci_reset+0x48>
    return status;
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	e000      	b.n	8003416 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800341e:	b5b0      	push	{r4, r5, r7, lr}
 8003420:	b0ce      	sub	sp, #312	@ 0x138
 8003422:	af00      	add	r7, sp, #0
 8003424:	4605      	mov	r5, r0
 8003426:	460c      	mov	r4, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003430:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8003434:	462a      	mov	r2, r5
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800343c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003440:	4622      	mov	r2, r4
 8003442:	801a      	strh	r2, [r3, #0]
 8003444:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003448:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800344c:	4602      	mov	r2, r0
 800344e:	801a      	strh	r2, [r3, #0]
 8003450:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003454:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8003458:	460a      	mov	r2, r1
 800345a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8003464:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8003468:	3308      	adds	r3, #8
 800346a:	f107 020c 	add.w	r2, r7, #12
 800346e:	4413      	add	r3, r2
 8003470:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003474:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8003478:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800347c:	4413      	add	r3, r2
 800347e:	3309      	adds	r3, #9
 8003480:	f107 020c 	add.w	r2, r7, #12
 8003484:	4413      	add	r3, r2
 8003486:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800348a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800348e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800349c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80034a0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80034a4:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80034a8:	7812      	ldrb	r2, [r2, #0]
 80034aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80034ac:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80034b0:	3301      	adds	r3, #1
 80034b2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80034b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80034ba:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80034be:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80034c2:	8812      	ldrh	r2, [r2, #0]
 80034c4:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80034c8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80034cc:	3302      	adds	r3, #2
 80034ce:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80034d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80034d6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80034da:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80034de:	8812      	ldrh	r2, [r2, #0]
 80034e0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80034e4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80034e8:	3302      	adds	r3, #2
 80034ea:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80034ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80034f2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80034f6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80034fe:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003502:	3301      	adds	r3, #1
 8003504:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8003508:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800350c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8003510:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003512:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003516:	3301      	adds	r3, #1
 8003518:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800351c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003520:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8003524:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003526:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800352a:	3301      	adds	r3, #1
 800352c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8003530:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003534:	3308      	adds	r3, #8
 8003536:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800353a:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800353e:	4618      	mov	r0, r3
 8003540:	f001 f885 	bl	800464e <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8003544:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8003548:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800354c:	4413      	add	r3, r2
 800354e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8003552:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003556:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800355a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800355c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003560:	3301      	adds	r3, #1
 8003562:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8003566:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800356a:	3301      	adds	r3, #1
 800356c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8003570:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8003574:	4618      	mov	r0, r3
 8003576:	f001 f86a 	bl	800464e <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800357a:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800357e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8003582:	4413      	add	r3, r2
 8003584:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8003588:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800358c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8003590:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003592:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003596:	3302      	adds	r3, #2
 8003598:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800359c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80035a0:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80035a4:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80035a6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80035aa:	3302      	adds	r3, #2
 80035ac:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80035b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80035b4:	2218      	movs	r2, #24
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 ffcd 	bl	8004558 <memset>
  rq.ogf = 0x3f;
 80035be:	233f      	movs	r3, #63	@ 0x3f
 80035c0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80035c4:	2383      	movs	r3, #131	@ 0x83
 80035c6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80035ca:	f107 030c 	add.w	r3, r7, #12
 80035ce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80035d2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80035d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80035da:	f107 030b 	add.w	r3, r7, #11
 80035de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80035e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fb2c 	bl	8003c4c <hci_send_req>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da01      	bge.n	80035fe <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80035fa:	23ff      	movs	r3, #255	@ 0xff
 80035fc:	e00d      	b.n	800361a <aci_gap_set_discoverable+0x1fc>
  if (status) {
 80035fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003602:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <aci_gap_set_discoverable+0x1fa>
    return status;
 800360c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003610:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	e000      	b.n	800361a <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8003620:	46bd      	mov	sp, r7
 8003622:	bdb0      	pop	{r4, r5, r7, pc}

08003624 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b0cf      	sub	sp, #316	@ 0x13c
 8003628:	af00      	add	r7, sp, #0
 800362a:	4604      	mov	r4, r0
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003634:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800363e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8003642:	4622      	mov	r2, r4
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800364a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800364e:	4602      	mov	r2, r0
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003656:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800365a:	460a      	mov	r2, r1
 800365c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	2207      	movs	r2, #7
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f000 ff72 	bl	8004558 <memset>
  uint8_t index_input = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Role = htob(Role, 1);
 800367a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800367e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003682:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8003686:	7812      	ldrb	r2, [r2, #0]
 8003688:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800368a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800368e:	3301      	adds	r3, #1
 8003690:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8003694:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003698:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800369c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80036a4:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80036a8:	3301      	adds	r3, #1
 80036aa:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80036ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80036b2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80036b6:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80036be:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80036c2:	3301      	adds	r3, #1
 80036c4:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80036c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80036cc:	2218      	movs	r2, #24
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 ff41 	bl	8004558 <memset>
  rq.ogf = 0x3f;
 80036d6:	233f      	movs	r3, #63	@ 0x3f
 80036d8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x08a;
 80036dc:	238a      	movs	r3, #138	@ 0x8a
 80036de:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80036ea:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80036ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80036fa:	2307      	movs	r3, #7
 80036fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8003700:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f000 faa0 	bl	8003c4c <hci_send_req>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	da01      	bge.n	8003716 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8003712:	23ff      	movs	r3, #255	@ 0xff
 8003714:	e02e      	b.n	8003774 <aci_gap_init+0x150>
  if (resp.Status) {
 8003716:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800371a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <aci_gap_init+0x10c>
    return resp.Status;
 8003724:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003728:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	e021      	b.n	8003774 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8003730:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003734:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003738:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800373c:	b29a      	uxth	r2, r3
 800373e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003742:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800374a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800374e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003752:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003756:	b29a      	uxth	r2, r3
 8003758:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800375c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800375e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003762:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003766:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800376a:	b29a      	uxth	r2, r3
 800376c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003770:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}

0800377e <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b088      	sub	sp, #32
 8003782:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003788:	f107 0308 	add.w	r3, r7, #8
 800378c:	2218      	movs	r2, #24
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fee1 	bl	8004558 <memset>
  rq.ogf = 0x3f;
 8003796:	233f      	movs	r3, #63	@ 0x3f
 8003798:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800379a:	f240 1301 	movw	r3, #257	@ 0x101
 800379e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80037a0:	1dfb      	adds	r3, r7, #7
 80037a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80037a8:	f107 0308 	add.w	r3, r7, #8
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fa4c 	bl	8003c4c <hci_send_req>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da01      	bge.n	80037be <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80037ba:	23ff      	movs	r3, #255	@ 0xff
 80037bc:	e005      	b.n	80037ca <aci_gatt_init+0x4c>
  if (status) {
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <aci_gatt_init+0x4a>
    return status;
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	e000      	b.n	80037ca <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80037d2:	b5b0      	push	{r4, r5, r7, lr}
 80037d4:	b0cc      	sub	sp, #304	@ 0x130
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4605      	mov	r5, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80037e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80037e8:	462a      	mov	r2, r5
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80037f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80037f4:	4622      	mov	r2, r4
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80037fc:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8003800:	4602      	mov	r2, r0
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003808:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800380c:	460a      	mov	r2, r1
 800380e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8003818:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800381c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 800382a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800382e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8003832:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8003836:	8812      	ldrh	r2, [r2, #0]
 8003838:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800383a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800383e:	3302      	adds	r3, #2
 8003840:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8003844:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003848:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800384c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8003850:	8812      	ldrh	r2, [r2, #0]
 8003852:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8003854:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003858:	3302      	adds	r3, #2
 800385a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800385e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003862:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8003866:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800386a:	7812      	ldrb	r2, [r2, #0]
 800386c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800386e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003872:	3301      	adds	r3, #1
 8003874:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8003878:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800387c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8003880:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8003884:	7812      	ldrb	r2, [r2, #0]
 8003886:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003888:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800388c:	3301      	adds	r3, #1
 800388e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8003892:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003896:	1d98      	adds	r0, r3, #6
 8003898:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800389c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80038a8:	f000 fed1 	bl	800464e <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 80038ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80038b0:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80038b4:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	4413      	add	r3, r2
 80038bc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80038c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038c4:	2218      	movs	r2, #24
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fe45 	bl	8004558 <memset>
  rq.ogf = 0x3f;
 80038ce:	233f      	movs	r3, #63	@ 0x3f
 80038d0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80038d4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80038d8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80038e4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80038e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80038ec:	f107 030b 	add.w	r3, r7, #11
 80038f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80038fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f9a3 	bl	8003c4c <hci_send_req>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	da01      	bge.n	8003910 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800390c:	23ff      	movs	r3, #255	@ 0xff
 800390e:	e00d      	b.n	800392c <aci_gatt_update_char_value+0x15a>
  if (status) {
 8003910:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003914:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <aci_gatt_update_char_value+0x158>
    return status;
 800391e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003922:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	e000      	b.n	800392c <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003932:	46bd      	mov	sp, r7
 8003934:	bdb0      	pop	{r4, r5, r7, pc}

08003936 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b0cc      	sub	sp, #304	@ 0x130
 800393a:	af00      	add	r7, sp, #0
 800393c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003940:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800394a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800394e:	4602      	mov	r2, r0
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003956:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800395a:	460a      	mov	r2, r1
 800395c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800395e:	f107 030c 	add.w	r3, r7, #12
 8003962:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8003966:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800396a:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Offset = htob(Offset, 1);
 8003978:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800397c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8003980:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8003984:	7812      	ldrb	r2, [r2, #0]
 8003986:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003988:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800398c:	3301      	adds	r3, #1
 800398e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Length = htob(Length, 1);
 8003992:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003996:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800399a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80039a2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80039a6:	3301      	adds	r3, #1
 80039a8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 80039ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80039b0:	1c98      	adds	r0, r3, #2
 80039b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80039b6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80039c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	f000 fe42 	bl	800464e <memcpy>
    index_input += Length*sizeof(uint8_t);
 80039ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80039ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80039d2:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4413      	add	r3, r2
 80039da:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80039de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039e2:	2218      	movs	r2, #24
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fdb6 	bl	8004558 <memset>
  rq.ogf = 0x3f;
 80039ec:	233f      	movs	r3, #63	@ 0x3f
 80039ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80039f2:	230c      	movs	r3, #12
 80039f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8003a00:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8003a04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8003a08:	f107 030b 	add.w	r3, r7, #11
 8003a0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003a16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f915 	bl	8003c4c <hci_send_req>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da01      	bge.n	8003a2c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8003a28:	23ff      	movs	r3, #255	@ 0xff
 8003a2a:	e00d      	b.n	8003a48 <aci_hal_write_config_data+0x112>
  if (status) {
 8003a2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003a30:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <aci_hal_write_config_data+0x110>
    return status;
 8003a3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003a3e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	e000      	b.n	8003a48 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d001      	beq.n	8003a6c <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e00c      	b.n	8003a86 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3302      	adds	r3, #2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8003a7a:	3b03      	subs	r3, #3
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8003a80:	2302      	movs	r3, #2
 8003a82:	e000      	b.n	8003a86 <verify_packet+0x34>
  
  return 0;      
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b0a6      	sub	sp, #152	@ 0x98
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	81fb      	strh	r3, [r7, #14]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	81bb      	strh	r3, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003aa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab0:	b21a      	sxth	r2, r3
 8003ab2:	89fb      	ldrh	r3, [r7, #14]
 8003ab4:	029b      	lsls	r3, r3, #10
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	b21b      	sxth	r3, r3
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8003ac0:	7afb      	ldrb	r3, [r7, #11]
 8003ac2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003ac8:	f107 0318 	add.w	r3, r7, #24
 8003acc:	3301      	adds	r3, #1
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	8819      	ldrh	r1, [r3, #0]
 8003ad6:	789b      	ldrb	r3, [r3, #2]
 8003ad8:	8011      	strh	r1, [r2, #0]
 8003ada:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003adc:	f107 0318 	add.w	r3, r7, #24
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	7afa      	ldrb	r2, [r7, #11]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fdb1 	bl	800464e <memcpy>
  
  if (hciContext.io.Send)
 8003aec:	4b08      	ldr	r3, [pc, #32]	@ (8003b10 <send_cmd+0x7c>)
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003af4:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <send_cmd+0x7c>)
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	7afa      	ldrb	r2, [r7, #11]
 8003afa:	b292      	uxth	r2, r2
 8003afc:	3204      	adds	r2, #4
 8003afe:	b291      	uxth	r1, r2
 8003b00:	f107 0218 	add.w	r2, r7, #24
 8003b04:	4610      	mov	r0, r2
 8003b06:	4798      	blx	r3
  }
}
 8003b08:	bf00      	nop
 8003b0a:	3798      	adds	r7, #152	@ 0x98
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	200007c8 	.word	0x200007c8

08003b14 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8003b1e:	e00a      	b.n	8003b36 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	4619      	mov	r1, r3
 8003b26:	6838      	ldr	r0, [r7, #0]
 8003b28:	f000 fabc 	bl	80040a4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fa23 	bl	8003f7c <list_insert_head>
  while (!list_is_empty(src_list))
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f000 f9fe 	bl	8003f38 <list_is_empty>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ee      	beq.n	8003b20 <move_list+0xc>
  }
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003b52:	e009      	b.n	8003b68 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	4809      	ldr	r0, [pc, #36]	@ (8003b80 <free_event_list+0x34>)
 8003b5a:	f000 fa7c 	bl	8004056 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4619      	mov	r1, r3
 8003b62:	4808      	ldr	r0, [pc, #32]	@ (8003b84 <free_event_list+0x38>)
 8003b64:	f000 fa30 	bl	8003fc8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003b68:	4806      	ldr	r0, [pc, #24]	@ (8003b84 <free_event_list+0x38>)
 8003b6a:	f000 fac2 	bl	80040f2 <list_get_size>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	ddef      	ble.n	8003b54 <free_event_list+0x8>
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000248 	.word	0x20000248
 8003b84:	20000240 	.word	0x20000240

08003b88 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003b98:	4a18      	ldr	r2, [pc, #96]	@ (8003bfc <hci_init+0x74>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8003b9e:	4818      	ldr	r0, [pc, #96]	@ (8003c00 <hci_init+0x78>)
 8003ba0:	f000 f9ba 	bl	8003f18 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003ba4:	4817      	ldr	r0, [pc, #92]	@ (8003c04 <hci_init+0x7c>)
 8003ba6:	f000 f9b7 	bl	8003f18 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003baa:	f7fc fe81 	bl	80008b0 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	e00c      	b.n	8003bce <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	228c      	movs	r2, #140	@ 0x8c
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	4a12      	ldr	r2, [pc, #72]	@ (8003c08 <hci_init+0x80>)
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	480f      	ldr	r0, [pc, #60]	@ (8003c00 <hci_init+0x78>)
 8003bc4:	f000 fa00 	bl	8003fc8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b09      	cmp	r3, #9
 8003bd2:	d9ef      	bls.n	8003bb4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003bd4:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <hci_init+0x74>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <hci_init+0x5c>
 8003bdc:	4b07      	ldr	r3, [pc, #28]	@ (8003bfc <hci_init+0x74>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2000      	movs	r0, #0
 8003be2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <hci_init+0x74>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <hci_init+0x6a>
 8003bec:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <hci_init+0x74>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4798      	blx	r3
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200007c8 	.word	0x200007c8
 8003c00:	20000240 	.word	0x20000240
 8003c04:	20000248 	.word	0x20000248
 8003c08:	20000250 	.word	0x20000250

08003c0c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0b      	ldr	r2, [pc, #44]	@ (8003c48 <hci_register_io_bus+0x3c>)
 8003c1a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a09      	ldr	r2, [pc, #36]	@ (8003c48 <hci_register_io_bus+0x3c>)
 8003c22:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	4a07      	ldr	r2, [pc, #28]	@ (8003c48 <hci_register_io_bus+0x3c>)
 8003c2a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	4a05      	ldr	r2, [pc, #20]	@ (8003c48 <hci_register_io_bus+0x3c>)
 8003c32:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a03      	ldr	r2, [pc, #12]	@ (8003c48 <hci_register_io_bus+0x3c>)
 8003c3a:	6093      	str	r3, [r2, #8]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	200007c8 	.word	0x200007c8

08003c4c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08e      	sub	sp, #56	@ 0x38
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	885b      	ldrh	r3, [r3, #2]
 8003c5c:	b21b      	sxth	r3, r3
 8003c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c62:	b21a      	sxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	029b      	lsls	r3, r3, #10
 8003c6a:	b21b      	sxth	r3, r3
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	b21b      	sxth	r3, r3
 8003c70:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f94c 	bl	8003f18 <list_init_head>

  free_event_list();
 8003c80:	f7ff ff64 	bl	8003b4c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8818      	ldrh	r0, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8859      	ldrh	r1, [r3, #2]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f7ff fefd 	bl	8003a94 <send_cmd>
  
  if (async)
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <hci_send_req+0x58>
  {
    return 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e0e2      	b.n	8003e6a <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003ca4:	f7fd fb3c 	bl	8001320 <HAL_GetTick>
 8003ca8:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003caa:	f7fd fb39 	bl	8001320 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cb8:	f200 80b3 	bhi.w	8003e22 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003cbc:	486d      	ldr	r0, [pc, #436]	@ (8003e74 <hci_send_req+0x228>)
 8003cbe:	f000 f93b 	bl	8003f38 <list_is_empty>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d000      	beq.n	8003cca <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003cc8:	e7ef      	b.n	8003caa <hci_send_req+0x5e>
      {
        break;
 8003cca:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003ccc:	f107 0310 	add.w	r3, r7, #16
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4868      	ldr	r0, [pc, #416]	@ (8003e74 <hci_send_req+0x228>)
 8003cd4:	f000 f9bf 	bl	8004056 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	3308      	adds	r3, #8
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8003cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d17f      	bne.n	8003de6 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce8:	3301      	adds	r3, #1
 8003cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	3303      	adds	r3, #3
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8003cfa:	3b03      	subs	r3, #3
 8003cfc:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8003cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d04:	d04c      	beq.n	8003da0 <hci_send_req+0x154>
 8003d06:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d08:	dc68      	bgt.n	8003ddc <hci_send_req+0x190>
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	f000 808b 	beq.w	8003e26 <hci_send_req+0x1da>
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	dc63      	bgt.n	8003ddc <hci_send_req+0x190>
 8003d14:	2b0e      	cmp	r3, #14
 8003d16:	d023      	beq.n	8003d60 <hci_send_req+0x114>
 8003d18:	2b0f      	cmp	r3, #15
 8003d1a:	d15f      	bne.n	8003ddc <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	885b      	ldrh	r3, [r3, #2]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d17e      	bne.n	8003e2a <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b0f      	cmp	r3, #15
 8003d32:	d004      	beq.n	8003d3e <hci_send_req+0xf2>
          if (cs->status) {
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d051      	beq.n	8003de0 <hci_send_req+0x194>
            goto failed;
 8003d3c:	e078      	b.n	8003e30 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	bf28      	it	cs
 8003d48:	461a      	movcs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6918      	ldr	r0, [r3, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d5a:	f000 fc78 	bl	800464e <memcpy>
        goto done;
 8003d5e:	e078      	b.n	8003e52 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d15d      	bne.n	8003e2e <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	3303      	adds	r3, #3
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	3b03      	subs	r3, #3
 8003d7c:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	bf28      	it	cs
 8003d88:	461a      	movcs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6918      	ldr	r0, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	461a      	mov	r2, r3
 8003d98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d9a:	f000 fc58 	bl	800464e <memcpy>
        goto done;
 8003d9e:	e058      	b.n	8003e52 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d118      	bne.n	8003de4 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	bf28      	it	cs
 8003dc2:	461a      	movcs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6918      	ldr	r0, [r3, #16]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	1c59      	adds	r1, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f000 fc3a 	bl	800464e <memcpy>
        goto done;
 8003dda:	e03a      	b.n	8003e52 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8003ddc:	bf00      	nop
 8003dde:	e002      	b.n	8003de6 <hci_send_req+0x19a>
          break;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <hci_send_req+0x19a>
          break;
 8003de4:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003de6:	4824      	ldr	r0, [pc, #144]	@ (8003e78 <hci_send_req+0x22c>)
 8003de8:	f000 f8a6 	bl	8003f38 <list_is_empty>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <hci_send_req+0x1c2>
 8003df2:	4820      	ldr	r0, [pc, #128]	@ (8003e74 <hci_send_req+0x228>)
 8003df4:	f000 f8a0 	bl	8003f38 <list_is_empty>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4619      	mov	r1, r3
 8003e02:	481d      	ldr	r0, [pc, #116]	@ (8003e78 <hci_send_req+0x22c>)
 8003e04:	f000 f8e0 	bl	8003fc8 <list_insert_tail>
      hciReadPacket=NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	e008      	b.n	8003e20 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	f107 0308 	add.w	r3, r7, #8
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f8d6 	bl	8003fc8 <list_insert_tail>
      hciReadPacket=NULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
  {
 8003e20:	e740      	b.n	8003ca4 <hci_send_req+0x58>
        goto failed;
 8003e22:	bf00      	nop
 8003e24:	e004      	b.n	8003e30 <hci_send_req+0x1e4>
        goto failed;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <hci_send_req+0x1e4>
          goto failed;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <hci_send_req+0x1e4>
          goto failed;
 8003e2e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	480f      	ldr	r0, [pc, #60]	@ (8003e78 <hci_send_req+0x22c>)
 8003e3c:	f000 f89e 	bl	8003f7c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003e40:	f107 0308 	add.w	r3, r7, #8
 8003e44:	4619      	mov	r1, r3
 8003e46:	480b      	ldr	r0, [pc, #44]	@ (8003e74 <hci_send_req+0x228>)
 8003e48:	f7ff fe64 	bl	8003b14 <move_list>

  return -1;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	e00b      	b.n	8003e6a <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4619      	mov	r1, r3
 8003e56:	4808      	ldr	r0, [pc, #32]	@ (8003e78 <hci_send_req+0x22c>)
 8003e58:	f000 f890 	bl	8003f7c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003e5c:	f107 0308 	add.w	r3, r7, #8
 8003e60:	4619      	mov	r1, r3
 8003e62:	4804      	ldr	r0, [pc, #16]	@ (8003e74 <hci_send_req+0x228>)
 8003e64:	f7ff fe56 	bl	8003b14 <move_list>

  return 0;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3738      	adds	r7, #56	@ 0x38
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000248 	.word	0x20000248
 8003e78:	20000240 	.word	0x20000240

08003e7c <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003e8c:	481f      	ldr	r0, [pc, #124]	@ (8003f0c <hci_notify_asynch_evt+0x90>)
 8003e8e:	f000 f853 	bl	8003f38 <list_is_empty>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d132      	bne.n	8003efe <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8003e98:	f107 030c 	add.w	r3, r7, #12
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	481b      	ldr	r0, [pc, #108]	@ (8003f0c <hci_notify_asynch_evt+0x90>)
 8003ea0:	f000 f8d9 	bl	8004056 <list_remove_head>
    
    if (hciContext.io.Receive)
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f10 <hci_notify_asynch_evt+0x94>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d02a      	beq.n	8003f02 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8003eac:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <hci_notify_asynch_evt+0x94>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	3208      	adds	r2, #8
 8003eb4:	2180      	movs	r1, #128	@ 0x80
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4798      	blx	r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d016      	beq.n	8003ef2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	7cfa      	ldrb	r2, [r7, #19]
 8003ec8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fdbf 	bl	8003a52 <verify_packet>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4619      	mov	r1, r3
 8003ede:	480d      	ldr	r0, [pc, #52]	@ (8003f14 <hci_notify_asynch_evt+0x98>)
 8003ee0:	f000 f872 	bl	8003fc8 <list_insert_tail>
 8003ee4:	e00d      	b.n	8003f02 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4808      	ldr	r0, [pc, #32]	@ (8003f0c <hci_notify_asynch_evt+0x90>)
 8003eec:	f000 f846 	bl	8003f7c <list_insert_head>
 8003ef0:	e007      	b.n	8003f02 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4805      	ldr	r0, [pc, #20]	@ (8003f0c <hci_notify_asynch_evt+0x90>)
 8003ef8:	f000 f840 	bl	8003f7c <list_insert_head>
 8003efc:	e001      	b.n	8003f02 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003f02:	697b      	ldr	r3, [r7, #20]
  
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000240 	.word	0x20000240
 8003f10:	200007c8 	.word	0x200007c8
 8003f14:	20000248 	.word	0x20000248

08003f18 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	605a      	str	r2, [r3, #4]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f40:	f3ef 8310 	mrs	r3, PRIMASK
 8003f44:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f46:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003f48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f4a:	b672      	cpsid	i
}
 8003f4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d102      	bne.n	8003f5e <list_is_empty+0x26>
  {
    return_value = 1;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
 8003f5c:	e001      	b.n	8003f62 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f383 8810 	msr	PRIMASK, r3
}
 8003f6c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f86:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003f8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f90:	b672      	cpsid	i
}
 8003f92:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f383 8810 	msr	PRIMASK, r3
}
 8003fba:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003fda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fdc:	b672      	cpsid	i
}
 8003fde:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f383 8810 	msr	PRIMASK, r3
}
 8004006:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004008:	bf00      	nop
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800401c:	f3ef 8310 	mrs	r3, PRIMASK
 8004020:	60fb      	str	r3, [r7, #12]
  return(result);
 8004022:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004024:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004026:	b672      	cpsid	i
}
 8004028:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6852      	ldr	r2, [r2, #4]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004060:	f3ef 8310 	mrs	r3, PRIMASK
 8004064:	60fb      	str	r3, [r7, #12]
  return(result);
 8004066:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800406a:	b672      	cpsid	i
}
 800406c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ffca 	bl	8004014 <list_remove_node>
  (*node)->next = NULL;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2200      	movs	r2, #0
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f383 8810 	msr	PRIMASK, r3
}
 800409a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800409c:	bf00      	nop
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80040b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80040b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80040b8:	b672      	cpsid	i
}
 80040ba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ffa3 	bl	8004014 <list_remove_node>
  (*node)->next = NULL;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f383 8810 	msr	PRIMASK, r3
}
 80040e8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80040ea:	bf00      	nop
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b089      	sub	sp, #36	@ 0x24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  int size = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004102:	613b      	str	r3, [r7, #16]
  return(result);
 8004104:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004108:	b672      	cpsid	i
}
 800410a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8004112:	e005      	b.n	8004120 <list_get_size+0x2e>
  {
    size++;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	3301      	adds	r3, #1
 8004118:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d1f5      	bne.n	8004114 <list_get_size+0x22>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f383 8810 	msr	PRIMASK, r3
}
 8004132:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8004134:	69fb      	ldr	r3, [r7, #28]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	@ 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <std>:
 8004144:	2300      	movs	r3, #0
 8004146:	b510      	push	{r4, lr}
 8004148:	4604      	mov	r4, r0
 800414a:	e9c0 3300 	strd	r3, r3, [r0]
 800414e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004152:	6083      	str	r3, [r0, #8]
 8004154:	8181      	strh	r1, [r0, #12]
 8004156:	6643      	str	r3, [r0, #100]	@ 0x64
 8004158:	81c2      	strh	r2, [r0, #14]
 800415a:	6183      	str	r3, [r0, #24]
 800415c:	4619      	mov	r1, r3
 800415e:	2208      	movs	r2, #8
 8004160:	305c      	adds	r0, #92	@ 0x5c
 8004162:	f000 f9f9 	bl	8004558 <memset>
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <std+0x58>)
 8004168:	6263      	str	r3, [r4, #36]	@ 0x24
 800416a:	4b0d      	ldr	r3, [pc, #52]	@ (80041a0 <std+0x5c>)
 800416c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800416e:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <std+0x60>)
 8004170:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004172:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <std+0x64>)
 8004174:	6323      	str	r3, [r4, #48]	@ 0x30
 8004176:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <std+0x68>)
 8004178:	6224      	str	r4, [r4, #32]
 800417a:	429c      	cmp	r4, r3
 800417c:	d006      	beq.n	800418c <std+0x48>
 800417e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004182:	4294      	cmp	r4, r2
 8004184:	d002      	beq.n	800418c <std+0x48>
 8004186:	33d0      	adds	r3, #208	@ 0xd0
 8004188:	429c      	cmp	r4, r3
 800418a:	d105      	bne.n	8004198 <std+0x54>
 800418c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004194:	f000 ba58 	b.w	8004648 <__retarget_lock_init_recursive>
 8004198:	bd10      	pop	{r4, pc}
 800419a:	bf00      	nop
 800419c:	080043a9 	.word	0x080043a9
 80041a0:	080043cb 	.word	0x080043cb
 80041a4:	08004403 	.word	0x08004403
 80041a8:	08004427 	.word	0x08004427
 80041ac:	200007e8 	.word	0x200007e8

080041b0 <stdio_exit_handler>:
 80041b0:	4a02      	ldr	r2, [pc, #8]	@ (80041bc <stdio_exit_handler+0xc>)
 80041b2:	4903      	ldr	r1, [pc, #12]	@ (80041c0 <stdio_exit_handler+0x10>)
 80041b4:	4803      	ldr	r0, [pc, #12]	@ (80041c4 <stdio_exit_handler+0x14>)
 80041b6:	f000 b869 	b.w	800428c <_fwalk_sglue>
 80041ba:	bf00      	nop
 80041bc:	20000014 	.word	0x20000014
 80041c0:	08004f05 	.word	0x08004f05
 80041c4:	20000024 	.word	0x20000024

080041c8 <cleanup_stdio>:
 80041c8:	6841      	ldr	r1, [r0, #4]
 80041ca:	4b0c      	ldr	r3, [pc, #48]	@ (80041fc <cleanup_stdio+0x34>)
 80041cc:	4299      	cmp	r1, r3
 80041ce:	b510      	push	{r4, lr}
 80041d0:	4604      	mov	r4, r0
 80041d2:	d001      	beq.n	80041d8 <cleanup_stdio+0x10>
 80041d4:	f000 fe96 	bl	8004f04 <_fflush_r>
 80041d8:	68a1      	ldr	r1, [r4, #8]
 80041da:	4b09      	ldr	r3, [pc, #36]	@ (8004200 <cleanup_stdio+0x38>)
 80041dc:	4299      	cmp	r1, r3
 80041de:	d002      	beq.n	80041e6 <cleanup_stdio+0x1e>
 80041e0:	4620      	mov	r0, r4
 80041e2:	f000 fe8f 	bl	8004f04 <_fflush_r>
 80041e6:	68e1      	ldr	r1, [r4, #12]
 80041e8:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <cleanup_stdio+0x3c>)
 80041ea:	4299      	cmp	r1, r3
 80041ec:	d004      	beq.n	80041f8 <cleanup_stdio+0x30>
 80041ee:	4620      	mov	r0, r4
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f4:	f000 be86 	b.w	8004f04 <_fflush_r>
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	bf00      	nop
 80041fc:	200007e8 	.word	0x200007e8
 8004200:	20000850 	.word	0x20000850
 8004204:	200008b8 	.word	0x200008b8

08004208 <global_stdio_init.part.0>:
 8004208:	b510      	push	{r4, lr}
 800420a:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <global_stdio_init.part.0+0x30>)
 800420c:	4c0b      	ldr	r4, [pc, #44]	@ (800423c <global_stdio_init.part.0+0x34>)
 800420e:	4a0c      	ldr	r2, [pc, #48]	@ (8004240 <global_stdio_init.part.0+0x38>)
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	4620      	mov	r0, r4
 8004214:	2200      	movs	r2, #0
 8004216:	2104      	movs	r1, #4
 8004218:	f7ff ff94 	bl	8004144 <std>
 800421c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004220:	2201      	movs	r2, #1
 8004222:	2109      	movs	r1, #9
 8004224:	f7ff ff8e 	bl	8004144 <std>
 8004228:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800422c:	2202      	movs	r2, #2
 800422e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004232:	2112      	movs	r1, #18
 8004234:	f7ff bf86 	b.w	8004144 <std>
 8004238:	20000920 	.word	0x20000920
 800423c:	200007e8 	.word	0x200007e8
 8004240:	080041b1 	.word	0x080041b1

08004244 <__sfp_lock_acquire>:
 8004244:	4801      	ldr	r0, [pc, #4]	@ (800424c <__sfp_lock_acquire+0x8>)
 8004246:	f000 ba00 	b.w	800464a <__retarget_lock_acquire_recursive>
 800424a:	bf00      	nop
 800424c:	20000929 	.word	0x20000929

08004250 <__sfp_lock_release>:
 8004250:	4801      	ldr	r0, [pc, #4]	@ (8004258 <__sfp_lock_release+0x8>)
 8004252:	f000 b9fb 	b.w	800464c <__retarget_lock_release_recursive>
 8004256:	bf00      	nop
 8004258:	20000929 	.word	0x20000929

0800425c <__sinit>:
 800425c:	b510      	push	{r4, lr}
 800425e:	4604      	mov	r4, r0
 8004260:	f7ff fff0 	bl	8004244 <__sfp_lock_acquire>
 8004264:	6a23      	ldr	r3, [r4, #32]
 8004266:	b11b      	cbz	r3, 8004270 <__sinit+0x14>
 8004268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800426c:	f7ff bff0 	b.w	8004250 <__sfp_lock_release>
 8004270:	4b04      	ldr	r3, [pc, #16]	@ (8004284 <__sinit+0x28>)
 8004272:	6223      	str	r3, [r4, #32]
 8004274:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <__sinit+0x2c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f5      	bne.n	8004268 <__sinit+0xc>
 800427c:	f7ff ffc4 	bl	8004208 <global_stdio_init.part.0>
 8004280:	e7f2      	b.n	8004268 <__sinit+0xc>
 8004282:	bf00      	nop
 8004284:	080041c9 	.word	0x080041c9
 8004288:	20000920 	.word	0x20000920

0800428c <_fwalk_sglue>:
 800428c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004290:	4607      	mov	r7, r0
 8004292:	4688      	mov	r8, r1
 8004294:	4614      	mov	r4, r2
 8004296:	2600      	movs	r6, #0
 8004298:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800429c:	f1b9 0901 	subs.w	r9, r9, #1
 80042a0:	d505      	bpl.n	80042ae <_fwalk_sglue+0x22>
 80042a2:	6824      	ldr	r4, [r4, #0]
 80042a4:	2c00      	cmp	r4, #0
 80042a6:	d1f7      	bne.n	8004298 <_fwalk_sglue+0xc>
 80042a8:	4630      	mov	r0, r6
 80042aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ae:	89ab      	ldrh	r3, [r5, #12]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d907      	bls.n	80042c4 <_fwalk_sglue+0x38>
 80042b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042b8:	3301      	adds	r3, #1
 80042ba:	d003      	beq.n	80042c4 <_fwalk_sglue+0x38>
 80042bc:	4629      	mov	r1, r5
 80042be:	4638      	mov	r0, r7
 80042c0:	47c0      	blx	r8
 80042c2:	4306      	orrs	r6, r0
 80042c4:	3568      	adds	r5, #104	@ 0x68
 80042c6:	e7e9      	b.n	800429c <_fwalk_sglue+0x10>

080042c8 <iprintf>:
 80042c8:	b40f      	push	{r0, r1, r2, r3}
 80042ca:	b507      	push	{r0, r1, r2, lr}
 80042cc:	4906      	ldr	r1, [pc, #24]	@ (80042e8 <iprintf+0x20>)
 80042ce:	ab04      	add	r3, sp, #16
 80042d0:	6808      	ldr	r0, [r1, #0]
 80042d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d6:	6881      	ldr	r1, [r0, #8]
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	f000 fae9 	bl	80048b0 <_vfiprintf_r>
 80042de:	b003      	add	sp, #12
 80042e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e4:	b004      	add	sp, #16
 80042e6:	4770      	bx	lr
 80042e8:	20000020 	.word	0x20000020

080042ec <_puts_r>:
 80042ec:	6a03      	ldr	r3, [r0, #32]
 80042ee:	b570      	push	{r4, r5, r6, lr}
 80042f0:	6884      	ldr	r4, [r0, #8]
 80042f2:	4605      	mov	r5, r0
 80042f4:	460e      	mov	r6, r1
 80042f6:	b90b      	cbnz	r3, 80042fc <_puts_r+0x10>
 80042f8:	f7ff ffb0 	bl	800425c <__sinit>
 80042fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042fe:	07db      	lsls	r3, r3, #31
 8004300:	d405      	bmi.n	800430e <_puts_r+0x22>
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	0598      	lsls	r0, r3, #22
 8004306:	d402      	bmi.n	800430e <_puts_r+0x22>
 8004308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800430a:	f000 f99e 	bl	800464a <__retarget_lock_acquire_recursive>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	0719      	lsls	r1, r3, #28
 8004312:	d502      	bpl.n	800431a <_puts_r+0x2e>
 8004314:	6923      	ldr	r3, [r4, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d135      	bne.n	8004386 <_puts_r+0x9a>
 800431a:	4621      	mov	r1, r4
 800431c:	4628      	mov	r0, r5
 800431e:	f000 f8c5 	bl	80044ac <__swsetup_r>
 8004322:	b380      	cbz	r0, 8004386 <_puts_r+0x9a>
 8004324:	f04f 35ff 	mov.w	r5, #4294967295
 8004328:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800432a:	07da      	lsls	r2, r3, #31
 800432c:	d405      	bmi.n	800433a <_puts_r+0x4e>
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	059b      	lsls	r3, r3, #22
 8004332:	d402      	bmi.n	800433a <_puts_r+0x4e>
 8004334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004336:	f000 f989 	bl	800464c <__retarget_lock_release_recursive>
 800433a:	4628      	mov	r0, r5
 800433c:	bd70      	pop	{r4, r5, r6, pc}
 800433e:	2b00      	cmp	r3, #0
 8004340:	da04      	bge.n	800434c <_puts_r+0x60>
 8004342:	69a2      	ldr	r2, [r4, #24]
 8004344:	429a      	cmp	r2, r3
 8004346:	dc17      	bgt.n	8004378 <_puts_r+0x8c>
 8004348:	290a      	cmp	r1, #10
 800434a:	d015      	beq.n	8004378 <_puts_r+0x8c>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	6022      	str	r2, [r4, #0]
 8004352:	7019      	strb	r1, [r3, #0]
 8004354:	68a3      	ldr	r3, [r4, #8]
 8004356:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800435a:	3b01      	subs	r3, #1
 800435c:	60a3      	str	r3, [r4, #8]
 800435e:	2900      	cmp	r1, #0
 8004360:	d1ed      	bne.n	800433e <_puts_r+0x52>
 8004362:	2b00      	cmp	r3, #0
 8004364:	da11      	bge.n	800438a <_puts_r+0x9e>
 8004366:	4622      	mov	r2, r4
 8004368:	210a      	movs	r1, #10
 800436a:	4628      	mov	r0, r5
 800436c:	f000 f85f 	bl	800442e <__swbuf_r>
 8004370:	3001      	adds	r0, #1
 8004372:	d0d7      	beq.n	8004324 <_puts_r+0x38>
 8004374:	250a      	movs	r5, #10
 8004376:	e7d7      	b.n	8004328 <_puts_r+0x3c>
 8004378:	4622      	mov	r2, r4
 800437a:	4628      	mov	r0, r5
 800437c:	f000 f857 	bl	800442e <__swbuf_r>
 8004380:	3001      	adds	r0, #1
 8004382:	d1e7      	bne.n	8004354 <_puts_r+0x68>
 8004384:	e7ce      	b.n	8004324 <_puts_r+0x38>
 8004386:	3e01      	subs	r6, #1
 8004388:	e7e4      	b.n	8004354 <_puts_r+0x68>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	6022      	str	r2, [r4, #0]
 8004390:	220a      	movs	r2, #10
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e7ee      	b.n	8004374 <_puts_r+0x88>
	...

08004398 <puts>:
 8004398:	4b02      	ldr	r3, [pc, #8]	@ (80043a4 <puts+0xc>)
 800439a:	4601      	mov	r1, r0
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	f7ff bfa5 	b.w	80042ec <_puts_r>
 80043a2:	bf00      	nop
 80043a4:	20000020 	.word	0x20000020

080043a8 <__sread>:
 80043a8:	b510      	push	{r4, lr}
 80043aa:	460c      	mov	r4, r1
 80043ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b0:	f000 f8fc 	bl	80045ac <_read_r>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	bfab      	itete	ge
 80043b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043ba:	89a3      	ldrhlt	r3, [r4, #12]
 80043bc:	181b      	addge	r3, r3, r0
 80043be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043c2:	bfac      	ite	ge
 80043c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043c6:	81a3      	strhlt	r3, [r4, #12]
 80043c8:	bd10      	pop	{r4, pc}

080043ca <__swrite>:
 80043ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ce:	461f      	mov	r7, r3
 80043d0:	898b      	ldrh	r3, [r1, #12]
 80043d2:	05db      	lsls	r3, r3, #23
 80043d4:	4605      	mov	r5, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	4616      	mov	r6, r2
 80043da:	d505      	bpl.n	80043e8 <__swrite+0x1e>
 80043dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e0:	2302      	movs	r3, #2
 80043e2:	2200      	movs	r2, #0
 80043e4:	f000 f8d0 	bl	8004588 <_lseek_r>
 80043e8:	89a3      	ldrh	r3, [r4, #12]
 80043ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043f2:	81a3      	strh	r3, [r4, #12]
 80043f4:	4632      	mov	r2, r6
 80043f6:	463b      	mov	r3, r7
 80043f8:	4628      	mov	r0, r5
 80043fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043fe:	f000 b8e7 	b.w	80045d0 <_write_r>

08004402 <__sseek>:
 8004402:	b510      	push	{r4, lr}
 8004404:	460c      	mov	r4, r1
 8004406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440a:	f000 f8bd 	bl	8004588 <_lseek_r>
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	bf15      	itete	ne
 8004414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800441a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800441e:	81a3      	strheq	r3, [r4, #12]
 8004420:	bf18      	it	ne
 8004422:	81a3      	strhne	r3, [r4, #12]
 8004424:	bd10      	pop	{r4, pc}

08004426 <__sclose>:
 8004426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800442a:	f000 b89d 	b.w	8004568 <_close_r>

0800442e <__swbuf_r>:
 800442e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004430:	460e      	mov	r6, r1
 8004432:	4614      	mov	r4, r2
 8004434:	4605      	mov	r5, r0
 8004436:	b118      	cbz	r0, 8004440 <__swbuf_r+0x12>
 8004438:	6a03      	ldr	r3, [r0, #32]
 800443a:	b90b      	cbnz	r3, 8004440 <__swbuf_r+0x12>
 800443c:	f7ff ff0e 	bl	800425c <__sinit>
 8004440:	69a3      	ldr	r3, [r4, #24]
 8004442:	60a3      	str	r3, [r4, #8]
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	071a      	lsls	r2, r3, #28
 8004448:	d501      	bpl.n	800444e <__swbuf_r+0x20>
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	b943      	cbnz	r3, 8004460 <__swbuf_r+0x32>
 800444e:	4621      	mov	r1, r4
 8004450:	4628      	mov	r0, r5
 8004452:	f000 f82b 	bl	80044ac <__swsetup_r>
 8004456:	b118      	cbz	r0, 8004460 <__swbuf_r+0x32>
 8004458:	f04f 37ff 	mov.w	r7, #4294967295
 800445c:	4638      	mov	r0, r7
 800445e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	6922      	ldr	r2, [r4, #16]
 8004464:	1a98      	subs	r0, r3, r2
 8004466:	6963      	ldr	r3, [r4, #20]
 8004468:	b2f6      	uxtb	r6, r6
 800446a:	4283      	cmp	r3, r0
 800446c:	4637      	mov	r7, r6
 800446e:	dc05      	bgt.n	800447c <__swbuf_r+0x4e>
 8004470:	4621      	mov	r1, r4
 8004472:	4628      	mov	r0, r5
 8004474:	f000 fd46 	bl	8004f04 <_fflush_r>
 8004478:	2800      	cmp	r0, #0
 800447a:	d1ed      	bne.n	8004458 <__swbuf_r+0x2a>
 800447c:	68a3      	ldr	r3, [r4, #8]
 800447e:	3b01      	subs	r3, #1
 8004480:	60a3      	str	r3, [r4, #8]
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	6022      	str	r2, [r4, #0]
 8004488:	701e      	strb	r6, [r3, #0]
 800448a:	6962      	ldr	r2, [r4, #20]
 800448c:	1c43      	adds	r3, r0, #1
 800448e:	429a      	cmp	r2, r3
 8004490:	d004      	beq.n	800449c <__swbuf_r+0x6e>
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	07db      	lsls	r3, r3, #31
 8004496:	d5e1      	bpl.n	800445c <__swbuf_r+0x2e>
 8004498:	2e0a      	cmp	r6, #10
 800449a:	d1df      	bne.n	800445c <__swbuf_r+0x2e>
 800449c:	4621      	mov	r1, r4
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 fd30 	bl	8004f04 <_fflush_r>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d0d9      	beq.n	800445c <__swbuf_r+0x2e>
 80044a8:	e7d6      	b.n	8004458 <__swbuf_r+0x2a>
	...

080044ac <__swsetup_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4b29      	ldr	r3, [pc, #164]	@ (8004554 <__swsetup_r+0xa8>)
 80044b0:	4605      	mov	r5, r0
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	460c      	mov	r4, r1
 80044b6:	b118      	cbz	r0, 80044c0 <__swsetup_r+0x14>
 80044b8:	6a03      	ldr	r3, [r0, #32]
 80044ba:	b90b      	cbnz	r3, 80044c0 <__swsetup_r+0x14>
 80044bc:	f7ff fece 	bl	800425c <__sinit>
 80044c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044c4:	0719      	lsls	r1, r3, #28
 80044c6:	d422      	bmi.n	800450e <__swsetup_r+0x62>
 80044c8:	06da      	lsls	r2, r3, #27
 80044ca:	d407      	bmi.n	80044dc <__swsetup_r+0x30>
 80044cc:	2209      	movs	r2, #9
 80044ce:	602a      	str	r2, [r5, #0]
 80044d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	f04f 30ff 	mov.w	r0, #4294967295
 80044da:	e033      	b.n	8004544 <__swsetup_r+0x98>
 80044dc:	0758      	lsls	r0, r3, #29
 80044de:	d512      	bpl.n	8004506 <__swsetup_r+0x5a>
 80044e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044e2:	b141      	cbz	r1, 80044f6 <__swsetup_r+0x4a>
 80044e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044e8:	4299      	cmp	r1, r3
 80044ea:	d002      	beq.n	80044f2 <__swsetup_r+0x46>
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 f8bd 	bl	800466c <_free_r>
 80044f2:	2300      	movs	r3, #0
 80044f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044fc:	81a3      	strh	r3, [r4, #12]
 80044fe:	2300      	movs	r3, #0
 8004500:	6063      	str	r3, [r4, #4]
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	b94b      	cbnz	r3, 8004526 <__swsetup_r+0x7a>
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800451c:	d003      	beq.n	8004526 <__swsetup_r+0x7a>
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f000 fd3d 	bl	8004fa0 <__smakebuf_r>
 8004526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800452a:	f013 0201 	ands.w	r2, r3, #1
 800452e:	d00a      	beq.n	8004546 <__swsetup_r+0x9a>
 8004530:	2200      	movs	r2, #0
 8004532:	60a2      	str	r2, [r4, #8]
 8004534:	6962      	ldr	r2, [r4, #20]
 8004536:	4252      	negs	r2, r2
 8004538:	61a2      	str	r2, [r4, #24]
 800453a:	6922      	ldr	r2, [r4, #16]
 800453c:	b942      	cbnz	r2, 8004550 <__swsetup_r+0xa4>
 800453e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004542:	d1c5      	bne.n	80044d0 <__swsetup_r+0x24>
 8004544:	bd38      	pop	{r3, r4, r5, pc}
 8004546:	0799      	lsls	r1, r3, #30
 8004548:	bf58      	it	pl
 800454a:	6962      	ldrpl	r2, [r4, #20]
 800454c:	60a2      	str	r2, [r4, #8]
 800454e:	e7f4      	b.n	800453a <__swsetup_r+0x8e>
 8004550:	2000      	movs	r0, #0
 8004552:	e7f7      	b.n	8004544 <__swsetup_r+0x98>
 8004554:	20000020 	.word	0x20000020

08004558 <memset>:
 8004558:	4402      	add	r2, r0
 800455a:	4603      	mov	r3, r0
 800455c:	4293      	cmp	r3, r2
 800455e:	d100      	bne.n	8004562 <memset+0xa>
 8004560:	4770      	bx	lr
 8004562:	f803 1b01 	strb.w	r1, [r3], #1
 8004566:	e7f9      	b.n	800455c <memset+0x4>

08004568 <_close_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4d06      	ldr	r5, [pc, #24]	@ (8004584 <_close_r+0x1c>)
 800456c:	2300      	movs	r3, #0
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	f7fc fdc7 	bl	8001106 <_close>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_close_r+0x1a>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_close_r+0x1a>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	20000924 	.word	0x20000924

08004588 <_lseek_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4d07      	ldr	r5, [pc, #28]	@ (80045a8 <_lseek_r+0x20>)
 800458c:	4604      	mov	r4, r0
 800458e:	4608      	mov	r0, r1
 8004590:	4611      	mov	r1, r2
 8004592:	2200      	movs	r2, #0
 8004594:	602a      	str	r2, [r5, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	f7fc fddc 	bl	8001154 <_lseek>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_lseek_r+0x1e>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_lseek_r+0x1e>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	20000924 	.word	0x20000924

080045ac <_read_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d07      	ldr	r5, [pc, #28]	@ (80045cc <_read_r+0x20>)
 80045b0:	4604      	mov	r4, r0
 80045b2:	4608      	mov	r0, r1
 80045b4:	4611      	mov	r1, r2
 80045b6:	2200      	movs	r2, #0
 80045b8:	602a      	str	r2, [r5, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f7fc fd6a 	bl	8001094 <_read>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_read_r+0x1e>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_read_r+0x1e>
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	20000924 	.word	0x20000924

080045d0 <_write_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4d07      	ldr	r5, [pc, #28]	@ (80045f0 <_write_r+0x20>)
 80045d4:	4604      	mov	r4, r0
 80045d6:	4608      	mov	r0, r1
 80045d8:	4611      	mov	r1, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	602a      	str	r2, [r5, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	f7fc fd75 	bl	80010ce <_write>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_write_r+0x1e>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_write_r+0x1e>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	20000924 	.word	0x20000924

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	@ (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000020 	.word	0x20000020

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	@ (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	@ (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	@ (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	@ (8004644 <__libc_init_array+0x44>)
 8004614:	f000 fd32 	bl	800507c <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	080051c0 	.word	0x080051c0
 800463c:	080051c0 	.word	0x080051c0
 8004640:	080051c0 	.word	0x080051c0
 8004644:	080051c4 	.word	0x080051c4

08004648 <__retarget_lock_init_recursive>:
 8004648:	4770      	bx	lr

0800464a <__retarget_lock_acquire_recursive>:
 800464a:	4770      	bx	lr

0800464c <__retarget_lock_release_recursive>:
 800464c:	4770      	bx	lr

0800464e <memcpy>:
 800464e:	440a      	add	r2, r1
 8004650:	4291      	cmp	r1, r2
 8004652:	f100 33ff 	add.w	r3, r0, #4294967295
 8004656:	d100      	bne.n	800465a <memcpy+0xc>
 8004658:	4770      	bx	lr
 800465a:	b510      	push	{r4, lr}
 800465c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004664:	4291      	cmp	r1, r2
 8004666:	d1f9      	bne.n	800465c <memcpy+0xe>
 8004668:	bd10      	pop	{r4, pc}
	...

0800466c <_free_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4605      	mov	r5, r0
 8004670:	2900      	cmp	r1, #0
 8004672:	d041      	beq.n	80046f8 <_free_r+0x8c>
 8004674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004678:	1f0c      	subs	r4, r1, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	bfb8      	it	lt
 800467e:	18e4      	addlt	r4, r4, r3
 8004680:	f000 f8e0 	bl	8004844 <__malloc_lock>
 8004684:	4a1d      	ldr	r2, [pc, #116]	@ (80046fc <_free_r+0x90>)
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	b933      	cbnz	r3, 8004698 <_free_r+0x2c>
 800468a:	6063      	str	r3, [r4, #4]
 800468c:	6014      	str	r4, [r2, #0]
 800468e:	4628      	mov	r0, r5
 8004690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004694:	f000 b8dc 	b.w	8004850 <__malloc_unlock>
 8004698:	42a3      	cmp	r3, r4
 800469a:	d908      	bls.n	80046ae <_free_r+0x42>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	1821      	adds	r1, r4, r0
 80046a0:	428b      	cmp	r3, r1
 80046a2:	bf01      	itttt	eq
 80046a4:	6819      	ldreq	r1, [r3, #0]
 80046a6:	685b      	ldreq	r3, [r3, #4]
 80046a8:	1809      	addeq	r1, r1, r0
 80046aa:	6021      	streq	r1, [r4, #0]
 80046ac:	e7ed      	b.n	800468a <_free_r+0x1e>
 80046ae:	461a      	mov	r2, r3
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	b10b      	cbz	r3, 80046b8 <_free_r+0x4c>
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	d9fa      	bls.n	80046ae <_free_r+0x42>
 80046b8:	6811      	ldr	r1, [r2, #0]
 80046ba:	1850      	adds	r0, r2, r1
 80046bc:	42a0      	cmp	r0, r4
 80046be:	d10b      	bne.n	80046d8 <_free_r+0x6c>
 80046c0:	6820      	ldr	r0, [r4, #0]
 80046c2:	4401      	add	r1, r0
 80046c4:	1850      	adds	r0, r2, r1
 80046c6:	4283      	cmp	r3, r0
 80046c8:	6011      	str	r1, [r2, #0]
 80046ca:	d1e0      	bne.n	800468e <_free_r+0x22>
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	6053      	str	r3, [r2, #4]
 80046d2:	4408      	add	r0, r1
 80046d4:	6010      	str	r0, [r2, #0]
 80046d6:	e7da      	b.n	800468e <_free_r+0x22>
 80046d8:	d902      	bls.n	80046e0 <_free_r+0x74>
 80046da:	230c      	movs	r3, #12
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	e7d6      	b.n	800468e <_free_r+0x22>
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	1821      	adds	r1, r4, r0
 80046e4:	428b      	cmp	r3, r1
 80046e6:	bf04      	itt	eq
 80046e8:	6819      	ldreq	r1, [r3, #0]
 80046ea:	685b      	ldreq	r3, [r3, #4]
 80046ec:	6063      	str	r3, [r4, #4]
 80046ee:	bf04      	itt	eq
 80046f0:	1809      	addeq	r1, r1, r0
 80046f2:	6021      	streq	r1, [r4, #0]
 80046f4:	6054      	str	r4, [r2, #4]
 80046f6:	e7ca      	b.n	800468e <_free_r+0x22>
 80046f8:	bd38      	pop	{r3, r4, r5, pc}
 80046fa:	bf00      	nop
 80046fc:	20000930 	.word	0x20000930

08004700 <sbrk_aligned>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4e0f      	ldr	r6, [pc, #60]	@ (8004740 <sbrk_aligned+0x40>)
 8004704:	460c      	mov	r4, r1
 8004706:	6831      	ldr	r1, [r6, #0]
 8004708:	4605      	mov	r5, r0
 800470a:	b911      	cbnz	r1, 8004712 <sbrk_aligned+0x12>
 800470c:	f000 fca6 	bl	800505c <_sbrk_r>
 8004710:	6030      	str	r0, [r6, #0]
 8004712:	4621      	mov	r1, r4
 8004714:	4628      	mov	r0, r5
 8004716:	f000 fca1 	bl	800505c <_sbrk_r>
 800471a:	1c43      	adds	r3, r0, #1
 800471c:	d103      	bne.n	8004726 <sbrk_aligned+0x26>
 800471e:	f04f 34ff 	mov.w	r4, #4294967295
 8004722:	4620      	mov	r0, r4
 8004724:	bd70      	pop	{r4, r5, r6, pc}
 8004726:	1cc4      	adds	r4, r0, #3
 8004728:	f024 0403 	bic.w	r4, r4, #3
 800472c:	42a0      	cmp	r0, r4
 800472e:	d0f8      	beq.n	8004722 <sbrk_aligned+0x22>
 8004730:	1a21      	subs	r1, r4, r0
 8004732:	4628      	mov	r0, r5
 8004734:	f000 fc92 	bl	800505c <_sbrk_r>
 8004738:	3001      	adds	r0, #1
 800473a:	d1f2      	bne.n	8004722 <sbrk_aligned+0x22>
 800473c:	e7ef      	b.n	800471e <sbrk_aligned+0x1e>
 800473e:	bf00      	nop
 8004740:	2000092c 	.word	0x2000092c

08004744 <_malloc_r>:
 8004744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004748:	1ccd      	adds	r5, r1, #3
 800474a:	f025 0503 	bic.w	r5, r5, #3
 800474e:	3508      	adds	r5, #8
 8004750:	2d0c      	cmp	r5, #12
 8004752:	bf38      	it	cc
 8004754:	250c      	movcc	r5, #12
 8004756:	2d00      	cmp	r5, #0
 8004758:	4606      	mov	r6, r0
 800475a:	db01      	blt.n	8004760 <_malloc_r+0x1c>
 800475c:	42a9      	cmp	r1, r5
 800475e:	d904      	bls.n	800476a <_malloc_r+0x26>
 8004760:	230c      	movs	r3, #12
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	2000      	movs	r0, #0
 8004766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800476a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004840 <_malloc_r+0xfc>
 800476e:	f000 f869 	bl	8004844 <__malloc_lock>
 8004772:	f8d8 3000 	ldr.w	r3, [r8]
 8004776:	461c      	mov	r4, r3
 8004778:	bb44      	cbnz	r4, 80047cc <_malloc_r+0x88>
 800477a:	4629      	mov	r1, r5
 800477c:	4630      	mov	r0, r6
 800477e:	f7ff ffbf 	bl	8004700 <sbrk_aligned>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	4604      	mov	r4, r0
 8004786:	d158      	bne.n	800483a <_malloc_r+0xf6>
 8004788:	f8d8 4000 	ldr.w	r4, [r8]
 800478c:	4627      	mov	r7, r4
 800478e:	2f00      	cmp	r7, #0
 8004790:	d143      	bne.n	800481a <_malloc_r+0xd6>
 8004792:	2c00      	cmp	r4, #0
 8004794:	d04b      	beq.n	800482e <_malloc_r+0xea>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	4639      	mov	r1, r7
 800479a:	4630      	mov	r0, r6
 800479c:	eb04 0903 	add.w	r9, r4, r3
 80047a0:	f000 fc5c 	bl	800505c <_sbrk_r>
 80047a4:	4581      	cmp	r9, r0
 80047a6:	d142      	bne.n	800482e <_malloc_r+0xea>
 80047a8:	6821      	ldr	r1, [r4, #0]
 80047aa:	1a6d      	subs	r5, r5, r1
 80047ac:	4629      	mov	r1, r5
 80047ae:	4630      	mov	r0, r6
 80047b0:	f7ff ffa6 	bl	8004700 <sbrk_aligned>
 80047b4:	3001      	adds	r0, #1
 80047b6:	d03a      	beq.n	800482e <_malloc_r+0xea>
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	442b      	add	r3, r5
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	f8d8 3000 	ldr.w	r3, [r8]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	bb62      	cbnz	r2, 8004820 <_malloc_r+0xdc>
 80047c6:	f8c8 7000 	str.w	r7, [r8]
 80047ca:	e00f      	b.n	80047ec <_malloc_r+0xa8>
 80047cc:	6822      	ldr	r2, [r4, #0]
 80047ce:	1b52      	subs	r2, r2, r5
 80047d0:	d420      	bmi.n	8004814 <_malloc_r+0xd0>
 80047d2:	2a0b      	cmp	r2, #11
 80047d4:	d917      	bls.n	8004806 <_malloc_r+0xc2>
 80047d6:	1961      	adds	r1, r4, r5
 80047d8:	42a3      	cmp	r3, r4
 80047da:	6025      	str	r5, [r4, #0]
 80047dc:	bf18      	it	ne
 80047de:	6059      	strne	r1, [r3, #4]
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	bf08      	it	eq
 80047e4:	f8c8 1000 	streq.w	r1, [r8]
 80047e8:	5162      	str	r2, [r4, r5]
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	4630      	mov	r0, r6
 80047ee:	f000 f82f 	bl	8004850 <__malloc_unlock>
 80047f2:	f104 000b 	add.w	r0, r4, #11
 80047f6:	1d23      	adds	r3, r4, #4
 80047f8:	f020 0007 	bic.w	r0, r0, #7
 80047fc:	1ac2      	subs	r2, r0, r3
 80047fe:	bf1c      	itt	ne
 8004800:	1a1b      	subne	r3, r3, r0
 8004802:	50a3      	strne	r3, [r4, r2]
 8004804:	e7af      	b.n	8004766 <_malloc_r+0x22>
 8004806:	6862      	ldr	r2, [r4, #4]
 8004808:	42a3      	cmp	r3, r4
 800480a:	bf0c      	ite	eq
 800480c:	f8c8 2000 	streq.w	r2, [r8]
 8004810:	605a      	strne	r2, [r3, #4]
 8004812:	e7eb      	b.n	80047ec <_malloc_r+0xa8>
 8004814:	4623      	mov	r3, r4
 8004816:	6864      	ldr	r4, [r4, #4]
 8004818:	e7ae      	b.n	8004778 <_malloc_r+0x34>
 800481a:	463c      	mov	r4, r7
 800481c:	687f      	ldr	r7, [r7, #4]
 800481e:	e7b6      	b.n	800478e <_malloc_r+0x4a>
 8004820:	461a      	mov	r2, r3
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	42a3      	cmp	r3, r4
 8004826:	d1fb      	bne.n	8004820 <_malloc_r+0xdc>
 8004828:	2300      	movs	r3, #0
 800482a:	6053      	str	r3, [r2, #4]
 800482c:	e7de      	b.n	80047ec <_malloc_r+0xa8>
 800482e:	230c      	movs	r3, #12
 8004830:	6033      	str	r3, [r6, #0]
 8004832:	4630      	mov	r0, r6
 8004834:	f000 f80c 	bl	8004850 <__malloc_unlock>
 8004838:	e794      	b.n	8004764 <_malloc_r+0x20>
 800483a:	6005      	str	r5, [r0, #0]
 800483c:	e7d6      	b.n	80047ec <_malloc_r+0xa8>
 800483e:	bf00      	nop
 8004840:	20000930 	.word	0x20000930

08004844 <__malloc_lock>:
 8004844:	4801      	ldr	r0, [pc, #4]	@ (800484c <__malloc_lock+0x8>)
 8004846:	f7ff bf00 	b.w	800464a <__retarget_lock_acquire_recursive>
 800484a:	bf00      	nop
 800484c:	20000928 	.word	0x20000928

08004850 <__malloc_unlock>:
 8004850:	4801      	ldr	r0, [pc, #4]	@ (8004858 <__malloc_unlock+0x8>)
 8004852:	f7ff befb 	b.w	800464c <__retarget_lock_release_recursive>
 8004856:	bf00      	nop
 8004858:	20000928 	.word	0x20000928

0800485c <__sfputc_r>:
 800485c:	6893      	ldr	r3, [r2, #8]
 800485e:	3b01      	subs	r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	b410      	push	{r4}
 8004864:	6093      	str	r3, [r2, #8]
 8004866:	da08      	bge.n	800487a <__sfputc_r+0x1e>
 8004868:	6994      	ldr	r4, [r2, #24]
 800486a:	42a3      	cmp	r3, r4
 800486c:	db01      	blt.n	8004872 <__sfputc_r+0x16>
 800486e:	290a      	cmp	r1, #10
 8004870:	d103      	bne.n	800487a <__sfputc_r+0x1e>
 8004872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004876:	f7ff bdda 	b.w	800442e <__swbuf_r>
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	1c58      	adds	r0, r3, #1
 800487e:	6010      	str	r0, [r2, #0]
 8004880:	7019      	strb	r1, [r3, #0]
 8004882:	4608      	mov	r0, r1
 8004884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004888:	4770      	bx	lr

0800488a <__sfputs_r>:
 800488a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488c:	4606      	mov	r6, r0
 800488e:	460f      	mov	r7, r1
 8004890:	4614      	mov	r4, r2
 8004892:	18d5      	adds	r5, r2, r3
 8004894:	42ac      	cmp	r4, r5
 8004896:	d101      	bne.n	800489c <__sfputs_r+0x12>
 8004898:	2000      	movs	r0, #0
 800489a:	e007      	b.n	80048ac <__sfputs_r+0x22>
 800489c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a0:	463a      	mov	r2, r7
 80048a2:	4630      	mov	r0, r6
 80048a4:	f7ff ffda 	bl	800485c <__sfputc_r>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d1f3      	bne.n	8004894 <__sfputs_r+0xa>
 80048ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048b0 <_vfiprintf_r>:
 80048b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b4:	460d      	mov	r5, r1
 80048b6:	b09d      	sub	sp, #116	@ 0x74
 80048b8:	4614      	mov	r4, r2
 80048ba:	4698      	mov	r8, r3
 80048bc:	4606      	mov	r6, r0
 80048be:	b118      	cbz	r0, 80048c8 <_vfiprintf_r+0x18>
 80048c0:	6a03      	ldr	r3, [r0, #32]
 80048c2:	b90b      	cbnz	r3, 80048c8 <_vfiprintf_r+0x18>
 80048c4:	f7ff fcca 	bl	800425c <__sinit>
 80048c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048ca:	07d9      	lsls	r1, r3, #31
 80048cc:	d405      	bmi.n	80048da <_vfiprintf_r+0x2a>
 80048ce:	89ab      	ldrh	r3, [r5, #12]
 80048d0:	059a      	lsls	r2, r3, #22
 80048d2:	d402      	bmi.n	80048da <_vfiprintf_r+0x2a>
 80048d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048d6:	f7ff feb8 	bl	800464a <__retarget_lock_acquire_recursive>
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	071b      	lsls	r3, r3, #28
 80048de:	d501      	bpl.n	80048e4 <_vfiprintf_r+0x34>
 80048e0:	692b      	ldr	r3, [r5, #16]
 80048e2:	b99b      	cbnz	r3, 800490c <_vfiprintf_r+0x5c>
 80048e4:	4629      	mov	r1, r5
 80048e6:	4630      	mov	r0, r6
 80048e8:	f7ff fde0 	bl	80044ac <__swsetup_r>
 80048ec:	b170      	cbz	r0, 800490c <_vfiprintf_r+0x5c>
 80048ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048f0:	07dc      	lsls	r4, r3, #31
 80048f2:	d504      	bpl.n	80048fe <_vfiprintf_r+0x4e>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	b01d      	add	sp, #116	@ 0x74
 80048fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fe:	89ab      	ldrh	r3, [r5, #12]
 8004900:	0598      	lsls	r0, r3, #22
 8004902:	d4f7      	bmi.n	80048f4 <_vfiprintf_r+0x44>
 8004904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004906:	f7ff fea1 	bl	800464c <__retarget_lock_release_recursive>
 800490a:	e7f3      	b.n	80048f4 <_vfiprintf_r+0x44>
 800490c:	2300      	movs	r3, #0
 800490e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004910:	2320      	movs	r3, #32
 8004912:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004916:	f8cd 800c 	str.w	r8, [sp, #12]
 800491a:	2330      	movs	r3, #48	@ 0x30
 800491c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004acc <_vfiprintf_r+0x21c>
 8004920:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004924:	f04f 0901 	mov.w	r9, #1
 8004928:	4623      	mov	r3, r4
 800492a:	469a      	mov	sl, r3
 800492c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004930:	b10a      	cbz	r2, 8004936 <_vfiprintf_r+0x86>
 8004932:	2a25      	cmp	r2, #37	@ 0x25
 8004934:	d1f9      	bne.n	800492a <_vfiprintf_r+0x7a>
 8004936:	ebba 0b04 	subs.w	fp, sl, r4
 800493a:	d00b      	beq.n	8004954 <_vfiprintf_r+0xa4>
 800493c:	465b      	mov	r3, fp
 800493e:	4622      	mov	r2, r4
 8004940:	4629      	mov	r1, r5
 8004942:	4630      	mov	r0, r6
 8004944:	f7ff ffa1 	bl	800488a <__sfputs_r>
 8004948:	3001      	adds	r0, #1
 800494a:	f000 80a7 	beq.w	8004a9c <_vfiprintf_r+0x1ec>
 800494e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004950:	445a      	add	r2, fp
 8004952:	9209      	str	r2, [sp, #36]	@ 0x24
 8004954:	f89a 3000 	ldrb.w	r3, [sl]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 809f 	beq.w	8004a9c <_vfiprintf_r+0x1ec>
 800495e:	2300      	movs	r3, #0
 8004960:	f04f 32ff 	mov.w	r2, #4294967295
 8004964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004968:	f10a 0a01 	add.w	sl, sl, #1
 800496c:	9304      	str	r3, [sp, #16]
 800496e:	9307      	str	r3, [sp, #28]
 8004970:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004974:	931a      	str	r3, [sp, #104]	@ 0x68
 8004976:	4654      	mov	r4, sl
 8004978:	2205      	movs	r2, #5
 800497a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497e:	4853      	ldr	r0, [pc, #332]	@ (8004acc <_vfiprintf_r+0x21c>)
 8004980:	f7fb fc36 	bl	80001f0 <memchr>
 8004984:	9a04      	ldr	r2, [sp, #16]
 8004986:	b9d8      	cbnz	r0, 80049c0 <_vfiprintf_r+0x110>
 8004988:	06d1      	lsls	r1, r2, #27
 800498a:	bf44      	itt	mi
 800498c:	2320      	movmi	r3, #32
 800498e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004992:	0713      	lsls	r3, r2, #28
 8004994:	bf44      	itt	mi
 8004996:	232b      	movmi	r3, #43	@ 0x2b
 8004998:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800499c:	f89a 3000 	ldrb.w	r3, [sl]
 80049a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a2:	d015      	beq.n	80049d0 <_vfiprintf_r+0x120>
 80049a4:	9a07      	ldr	r2, [sp, #28]
 80049a6:	4654      	mov	r4, sl
 80049a8:	2000      	movs	r0, #0
 80049aa:	f04f 0c0a 	mov.w	ip, #10
 80049ae:	4621      	mov	r1, r4
 80049b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049b4:	3b30      	subs	r3, #48	@ 0x30
 80049b6:	2b09      	cmp	r3, #9
 80049b8:	d94b      	bls.n	8004a52 <_vfiprintf_r+0x1a2>
 80049ba:	b1b0      	cbz	r0, 80049ea <_vfiprintf_r+0x13a>
 80049bc:	9207      	str	r2, [sp, #28]
 80049be:	e014      	b.n	80049ea <_vfiprintf_r+0x13a>
 80049c0:	eba0 0308 	sub.w	r3, r0, r8
 80049c4:	fa09 f303 	lsl.w	r3, r9, r3
 80049c8:	4313      	orrs	r3, r2
 80049ca:	9304      	str	r3, [sp, #16]
 80049cc:	46a2      	mov	sl, r4
 80049ce:	e7d2      	b.n	8004976 <_vfiprintf_r+0xc6>
 80049d0:	9b03      	ldr	r3, [sp, #12]
 80049d2:	1d19      	adds	r1, r3, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	9103      	str	r1, [sp, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bfbb      	ittet	lt
 80049dc:	425b      	neglt	r3, r3
 80049de:	f042 0202 	orrlt.w	r2, r2, #2
 80049e2:	9307      	strge	r3, [sp, #28]
 80049e4:	9307      	strlt	r3, [sp, #28]
 80049e6:	bfb8      	it	lt
 80049e8:	9204      	strlt	r2, [sp, #16]
 80049ea:	7823      	ldrb	r3, [r4, #0]
 80049ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80049ee:	d10a      	bne.n	8004a06 <_vfiprintf_r+0x156>
 80049f0:	7863      	ldrb	r3, [r4, #1]
 80049f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049f4:	d132      	bne.n	8004a5c <_vfiprintf_r+0x1ac>
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	1d1a      	adds	r2, r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	9203      	str	r2, [sp, #12]
 80049fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a02:	3402      	adds	r4, #2
 8004a04:	9305      	str	r3, [sp, #20]
 8004a06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004adc <_vfiprintf_r+0x22c>
 8004a0a:	7821      	ldrb	r1, [r4, #0]
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	4650      	mov	r0, sl
 8004a10:	f7fb fbee 	bl	80001f0 <memchr>
 8004a14:	b138      	cbz	r0, 8004a26 <_vfiprintf_r+0x176>
 8004a16:	9b04      	ldr	r3, [sp, #16]
 8004a18:	eba0 000a 	sub.w	r0, r0, sl
 8004a1c:	2240      	movs	r2, #64	@ 0x40
 8004a1e:	4082      	lsls	r2, r0
 8004a20:	4313      	orrs	r3, r2
 8004a22:	3401      	adds	r4, #1
 8004a24:	9304      	str	r3, [sp, #16]
 8004a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a2a:	4829      	ldr	r0, [pc, #164]	@ (8004ad0 <_vfiprintf_r+0x220>)
 8004a2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a30:	2206      	movs	r2, #6
 8004a32:	f7fb fbdd 	bl	80001f0 <memchr>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d03f      	beq.n	8004aba <_vfiprintf_r+0x20a>
 8004a3a:	4b26      	ldr	r3, [pc, #152]	@ (8004ad4 <_vfiprintf_r+0x224>)
 8004a3c:	bb1b      	cbnz	r3, 8004a86 <_vfiprintf_r+0x1d6>
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	3307      	adds	r3, #7
 8004a42:	f023 0307 	bic.w	r3, r3, #7
 8004a46:	3308      	adds	r3, #8
 8004a48:	9303      	str	r3, [sp, #12]
 8004a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a4c:	443b      	add	r3, r7
 8004a4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a50:	e76a      	b.n	8004928 <_vfiprintf_r+0x78>
 8004a52:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a56:	460c      	mov	r4, r1
 8004a58:	2001      	movs	r0, #1
 8004a5a:	e7a8      	b.n	80049ae <_vfiprintf_r+0xfe>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	3401      	adds	r4, #1
 8004a60:	9305      	str	r3, [sp, #20]
 8004a62:	4619      	mov	r1, r3
 8004a64:	f04f 0c0a 	mov.w	ip, #10
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a6e:	3a30      	subs	r2, #48	@ 0x30
 8004a70:	2a09      	cmp	r2, #9
 8004a72:	d903      	bls.n	8004a7c <_vfiprintf_r+0x1cc>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0c6      	beq.n	8004a06 <_vfiprintf_r+0x156>
 8004a78:	9105      	str	r1, [sp, #20]
 8004a7a:	e7c4      	b.n	8004a06 <_vfiprintf_r+0x156>
 8004a7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a80:	4604      	mov	r4, r0
 8004a82:	2301      	movs	r3, #1
 8004a84:	e7f0      	b.n	8004a68 <_vfiprintf_r+0x1b8>
 8004a86:	ab03      	add	r3, sp, #12
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ad8 <_vfiprintf_r+0x228>)
 8004a8e:	a904      	add	r1, sp, #16
 8004a90:	4630      	mov	r0, r6
 8004a92:	f3af 8000 	nop.w
 8004a96:	4607      	mov	r7, r0
 8004a98:	1c78      	adds	r0, r7, #1
 8004a9a:	d1d6      	bne.n	8004a4a <_vfiprintf_r+0x19a>
 8004a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a9e:	07d9      	lsls	r1, r3, #31
 8004aa0:	d405      	bmi.n	8004aae <_vfiprintf_r+0x1fe>
 8004aa2:	89ab      	ldrh	r3, [r5, #12]
 8004aa4:	059a      	lsls	r2, r3, #22
 8004aa6:	d402      	bmi.n	8004aae <_vfiprintf_r+0x1fe>
 8004aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aaa:	f7ff fdcf 	bl	800464c <__retarget_lock_release_recursive>
 8004aae:	89ab      	ldrh	r3, [r5, #12]
 8004ab0:	065b      	lsls	r3, r3, #25
 8004ab2:	f53f af1f 	bmi.w	80048f4 <_vfiprintf_r+0x44>
 8004ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ab8:	e71e      	b.n	80048f8 <_vfiprintf_r+0x48>
 8004aba:	ab03      	add	r3, sp, #12
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	462a      	mov	r2, r5
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <_vfiprintf_r+0x228>)
 8004ac2:	a904      	add	r1, sp, #16
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f000 f879 	bl	8004bbc <_printf_i>
 8004aca:	e7e4      	b.n	8004a96 <_vfiprintf_r+0x1e6>
 8004acc:	08005184 	.word	0x08005184
 8004ad0:	0800518e 	.word	0x0800518e
 8004ad4:	00000000 	.word	0x00000000
 8004ad8:	0800488b 	.word	0x0800488b
 8004adc:	0800518a 	.word	0x0800518a

08004ae0 <_printf_common>:
 8004ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	4616      	mov	r6, r2
 8004ae6:	4698      	mov	r8, r3
 8004ae8:	688a      	ldr	r2, [r1, #8]
 8004aea:	690b      	ldr	r3, [r1, #16]
 8004aec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004af0:	4293      	cmp	r3, r2
 8004af2:	bfb8      	it	lt
 8004af4:	4613      	movlt	r3, r2
 8004af6:	6033      	str	r3, [r6, #0]
 8004af8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004afc:	4607      	mov	r7, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	b10a      	cbz	r2, 8004b06 <_printf_common+0x26>
 8004b02:	3301      	adds	r3, #1
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	0699      	lsls	r1, r3, #26
 8004b0a:	bf42      	ittt	mi
 8004b0c:	6833      	ldrmi	r3, [r6, #0]
 8004b0e:	3302      	addmi	r3, #2
 8004b10:	6033      	strmi	r3, [r6, #0]
 8004b12:	6825      	ldr	r5, [r4, #0]
 8004b14:	f015 0506 	ands.w	r5, r5, #6
 8004b18:	d106      	bne.n	8004b28 <_printf_common+0x48>
 8004b1a:	f104 0a19 	add.w	sl, r4, #25
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	6832      	ldr	r2, [r6, #0]
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	42ab      	cmp	r3, r5
 8004b26:	dc26      	bgt.n	8004b76 <_printf_common+0x96>
 8004b28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	3b00      	subs	r3, #0
 8004b30:	bf18      	it	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	0692      	lsls	r2, r2, #26
 8004b36:	d42b      	bmi.n	8004b90 <_printf_common+0xb0>
 8004b38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	4638      	mov	r0, r7
 8004b40:	47c8      	blx	r9
 8004b42:	3001      	adds	r0, #1
 8004b44:	d01e      	beq.n	8004b84 <_printf_common+0xa4>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	6922      	ldr	r2, [r4, #16]
 8004b4a:	f003 0306 	and.w	r3, r3, #6
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	bf02      	ittt	eq
 8004b52:	68e5      	ldreq	r5, [r4, #12]
 8004b54:	6833      	ldreq	r3, [r6, #0]
 8004b56:	1aed      	subeq	r5, r5, r3
 8004b58:	68a3      	ldr	r3, [r4, #8]
 8004b5a:	bf0c      	ite	eq
 8004b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b60:	2500      	movne	r5, #0
 8004b62:	4293      	cmp	r3, r2
 8004b64:	bfc4      	itt	gt
 8004b66:	1a9b      	subgt	r3, r3, r2
 8004b68:	18ed      	addgt	r5, r5, r3
 8004b6a:	2600      	movs	r6, #0
 8004b6c:	341a      	adds	r4, #26
 8004b6e:	42b5      	cmp	r5, r6
 8004b70:	d11a      	bne.n	8004ba8 <_printf_common+0xc8>
 8004b72:	2000      	movs	r0, #0
 8004b74:	e008      	b.n	8004b88 <_printf_common+0xa8>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4652      	mov	r2, sl
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	47c8      	blx	r9
 8004b80:	3001      	adds	r0, #1
 8004b82:	d103      	bne.n	8004b8c <_printf_common+0xac>
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	e7c6      	b.n	8004b1e <_printf_common+0x3e>
 8004b90:	18e1      	adds	r1, r4, r3
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	2030      	movs	r0, #48	@ 0x30
 8004b96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b9a:	4422      	add	r2, r4
 8004b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	e7c7      	b.n	8004b38 <_printf_common+0x58>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4622      	mov	r2, r4
 8004bac:	4641      	mov	r1, r8
 8004bae:	4638      	mov	r0, r7
 8004bb0:	47c8      	blx	r9
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d0e6      	beq.n	8004b84 <_printf_common+0xa4>
 8004bb6:	3601      	adds	r6, #1
 8004bb8:	e7d9      	b.n	8004b6e <_printf_common+0x8e>
	...

08004bbc <_printf_i>:
 8004bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	7e0f      	ldrb	r7, [r1, #24]
 8004bc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bc4:	2f78      	cmp	r7, #120	@ 0x78
 8004bc6:	4691      	mov	r9, r2
 8004bc8:	4680      	mov	r8, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	469a      	mov	sl, r3
 8004bce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bd2:	d807      	bhi.n	8004be4 <_printf_i+0x28>
 8004bd4:	2f62      	cmp	r7, #98	@ 0x62
 8004bd6:	d80a      	bhi.n	8004bee <_printf_i+0x32>
 8004bd8:	2f00      	cmp	r7, #0
 8004bda:	f000 80d2 	beq.w	8004d82 <_printf_i+0x1c6>
 8004bde:	2f58      	cmp	r7, #88	@ 0x58
 8004be0:	f000 80b9 	beq.w	8004d56 <_printf_i+0x19a>
 8004be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004be8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bec:	e03a      	b.n	8004c64 <_printf_i+0xa8>
 8004bee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bf2:	2b15      	cmp	r3, #21
 8004bf4:	d8f6      	bhi.n	8004be4 <_printf_i+0x28>
 8004bf6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bfc <_printf_i+0x40>)
 8004bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bfc:	08004c55 	.word	0x08004c55
 8004c00:	08004c69 	.word	0x08004c69
 8004c04:	08004be5 	.word	0x08004be5
 8004c08:	08004be5 	.word	0x08004be5
 8004c0c:	08004be5 	.word	0x08004be5
 8004c10:	08004be5 	.word	0x08004be5
 8004c14:	08004c69 	.word	0x08004c69
 8004c18:	08004be5 	.word	0x08004be5
 8004c1c:	08004be5 	.word	0x08004be5
 8004c20:	08004be5 	.word	0x08004be5
 8004c24:	08004be5 	.word	0x08004be5
 8004c28:	08004d69 	.word	0x08004d69
 8004c2c:	08004c93 	.word	0x08004c93
 8004c30:	08004d23 	.word	0x08004d23
 8004c34:	08004be5 	.word	0x08004be5
 8004c38:	08004be5 	.word	0x08004be5
 8004c3c:	08004d8b 	.word	0x08004d8b
 8004c40:	08004be5 	.word	0x08004be5
 8004c44:	08004c93 	.word	0x08004c93
 8004c48:	08004be5 	.word	0x08004be5
 8004c4c:	08004be5 	.word	0x08004be5
 8004c50:	08004d2b 	.word	0x08004d2b
 8004c54:	6833      	ldr	r3, [r6, #0]
 8004c56:	1d1a      	adds	r2, r3, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6032      	str	r2, [r6, #0]
 8004c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c64:	2301      	movs	r3, #1
 8004c66:	e09d      	b.n	8004da4 <_printf_i+0x1e8>
 8004c68:	6833      	ldr	r3, [r6, #0]
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	6031      	str	r1, [r6, #0]
 8004c70:	0606      	lsls	r6, r0, #24
 8004c72:	d501      	bpl.n	8004c78 <_printf_i+0xbc>
 8004c74:	681d      	ldr	r5, [r3, #0]
 8004c76:	e003      	b.n	8004c80 <_printf_i+0xc4>
 8004c78:	0645      	lsls	r5, r0, #25
 8004c7a:	d5fb      	bpl.n	8004c74 <_printf_i+0xb8>
 8004c7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	da03      	bge.n	8004c8c <_printf_i+0xd0>
 8004c84:	232d      	movs	r3, #45	@ 0x2d
 8004c86:	426d      	negs	r5, r5
 8004c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c8c:	4859      	ldr	r0, [pc, #356]	@ (8004df4 <_printf_i+0x238>)
 8004c8e:	230a      	movs	r3, #10
 8004c90:	e011      	b.n	8004cb6 <_printf_i+0xfa>
 8004c92:	6821      	ldr	r1, [r4, #0]
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	0608      	lsls	r0, r1, #24
 8004c98:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c9c:	d402      	bmi.n	8004ca4 <_printf_i+0xe8>
 8004c9e:	0649      	lsls	r1, r1, #25
 8004ca0:	bf48      	it	mi
 8004ca2:	b2ad      	uxthmi	r5, r5
 8004ca4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ca6:	4853      	ldr	r0, [pc, #332]	@ (8004df4 <_printf_i+0x238>)
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	bf14      	ite	ne
 8004cac:	230a      	movne	r3, #10
 8004cae:	2308      	moveq	r3, #8
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cb6:	6866      	ldr	r6, [r4, #4]
 8004cb8:	60a6      	str	r6, [r4, #8]
 8004cba:	2e00      	cmp	r6, #0
 8004cbc:	bfa2      	ittt	ge
 8004cbe:	6821      	ldrge	r1, [r4, #0]
 8004cc0:	f021 0104 	bicge.w	r1, r1, #4
 8004cc4:	6021      	strge	r1, [r4, #0]
 8004cc6:	b90d      	cbnz	r5, 8004ccc <_printf_i+0x110>
 8004cc8:	2e00      	cmp	r6, #0
 8004cca:	d04b      	beq.n	8004d64 <_printf_i+0x1a8>
 8004ccc:	4616      	mov	r6, r2
 8004cce:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cd2:	fb03 5711 	mls	r7, r3, r1, r5
 8004cd6:	5dc7      	ldrb	r7, [r0, r7]
 8004cd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cdc:	462f      	mov	r7, r5
 8004cde:	42bb      	cmp	r3, r7
 8004ce0:	460d      	mov	r5, r1
 8004ce2:	d9f4      	bls.n	8004cce <_printf_i+0x112>
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d10b      	bne.n	8004d00 <_printf_i+0x144>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	07df      	lsls	r7, r3, #31
 8004cec:	d508      	bpl.n	8004d00 <_printf_i+0x144>
 8004cee:	6923      	ldr	r3, [r4, #16]
 8004cf0:	6861      	ldr	r1, [r4, #4]
 8004cf2:	4299      	cmp	r1, r3
 8004cf4:	bfde      	ittt	le
 8004cf6:	2330      	movle	r3, #48	@ 0x30
 8004cf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d00:	1b92      	subs	r2, r2, r6
 8004d02:	6122      	str	r2, [r4, #16]
 8004d04:	f8cd a000 	str.w	sl, [sp]
 8004d08:	464b      	mov	r3, r9
 8004d0a:	aa03      	add	r2, sp, #12
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f7ff fee6 	bl	8004ae0 <_printf_common>
 8004d14:	3001      	adds	r0, #1
 8004d16:	d14a      	bne.n	8004dae <_printf_i+0x1f2>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	b004      	add	sp, #16
 8004d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	f043 0320 	orr.w	r3, r3, #32
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	4833      	ldr	r0, [pc, #204]	@ (8004df8 <_printf_i+0x23c>)
 8004d2c:	2778      	movs	r7, #120	@ 0x78
 8004d2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	6831      	ldr	r1, [r6, #0]
 8004d36:	061f      	lsls	r7, r3, #24
 8004d38:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d3c:	d402      	bmi.n	8004d44 <_printf_i+0x188>
 8004d3e:	065f      	lsls	r7, r3, #25
 8004d40:	bf48      	it	mi
 8004d42:	b2ad      	uxthmi	r5, r5
 8004d44:	6031      	str	r1, [r6, #0]
 8004d46:	07d9      	lsls	r1, r3, #31
 8004d48:	bf44      	itt	mi
 8004d4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d4e:	6023      	strmi	r3, [r4, #0]
 8004d50:	b11d      	cbz	r5, 8004d5a <_printf_i+0x19e>
 8004d52:	2310      	movs	r3, #16
 8004d54:	e7ac      	b.n	8004cb0 <_printf_i+0xf4>
 8004d56:	4827      	ldr	r0, [pc, #156]	@ (8004df4 <_printf_i+0x238>)
 8004d58:	e7e9      	b.n	8004d2e <_printf_i+0x172>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	f023 0320 	bic.w	r3, r3, #32
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	e7f6      	b.n	8004d52 <_printf_i+0x196>
 8004d64:	4616      	mov	r6, r2
 8004d66:	e7bd      	b.n	8004ce4 <_printf_i+0x128>
 8004d68:	6833      	ldr	r3, [r6, #0]
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	6961      	ldr	r1, [r4, #20]
 8004d6e:	1d18      	adds	r0, r3, #4
 8004d70:	6030      	str	r0, [r6, #0]
 8004d72:	062e      	lsls	r6, r5, #24
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	d501      	bpl.n	8004d7c <_printf_i+0x1c0>
 8004d78:	6019      	str	r1, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <_printf_i+0x1c6>
 8004d7c:	0668      	lsls	r0, r5, #25
 8004d7e:	d5fb      	bpl.n	8004d78 <_printf_i+0x1bc>
 8004d80:	8019      	strh	r1, [r3, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	6123      	str	r3, [r4, #16]
 8004d86:	4616      	mov	r6, r2
 8004d88:	e7bc      	b.n	8004d04 <_printf_i+0x148>
 8004d8a:	6833      	ldr	r3, [r6, #0]
 8004d8c:	1d1a      	adds	r2, r3, #4
 8004d8e:	6032      	str	r2, [r6, #0]
 8004d90:	681e      	ldr	r6, [r3, #0]
 8004d92:	6862      	ldr	r2, [r4, #4]
 8004d94:	2100      	movs	r1, #0
 8004d96:	4630      	mov	r0, r6
 8004d98:	f7fb fa2a 	bl	80001f0 <memchr>
 8004d9c:	b108      	cbz	r0, 8004da2 <_printf_i+0x1e6>
 8004d9e:	1b80      	subs	r0, r0, r6
 8004da0:	6060      	str	r0, [r4, #4]
 8004da2:	6863      	ldr	r3, [r4, #4]
 8004da4:	6123      	str	r3, [r4, #16]
 8004da6:	2300      	movs	r3, #0
 8004da8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dac:	e7aa      	b.n	8004d04 <_printf_i+0x148>
 8004dae:	6923      	ldr	r3, [r4, #16]
 8004db0:	4632      	mov	r2, r6
 8004db2:	4649      	mov	r1, r9
 8004db4:	4640      	mov	r0, r8
 8004db6:	47d0      	blx	sl
 8004db8:	3001      	adds	r0, #1
 8004dba:	d0ad      	beq.n	8004d18 <_printf_i+0x15c>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	079b      	lsls	r3, r3, #30
 8004dc0:	d413      	bmi.n	8004dea <_printf_i+0x22e>
 8004dc2:	68e0      	ldr	r0, [r4, #12]
 8004dc4:	9b03      	ldr	r3, [sp, #12]
 8004dc6:	4298      	cmp	r0, r3
 8004dc8:	bfb8      	it	lt
 8004dca:	4618      	movlt	r0, r3
 8004dcc:	e7a6      	b.n	8004d1c <_printf_i+0x160>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	47d0      	blx	sl
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d09d      	beq.n	8004d18 <_printf_i+0x15c>
 8004ddc:	3501      	adds	r5, #1
 8004dde:	68e3      	ldr	r3, [r4, #12]
 8004de0:	9903      	ldr	r1, [sp, #12]
 8004de2:	1a5b      	subs	r3, r3, r1
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	dcf2      	bgt.n	8004dce <_printf_i+0x212>
 8004de8:	e7eb      	b.n	8004dc2 <_printf_i+0x206>
 8004dea:	2500      	movs	r5, #0
 8004dec:	f104 0619 	add.w	r6, r4, #25
 8004df0:	e7f5      	b.n	8004dde <_printf_i+0x222>
 8004df2:	bf00      	nop
 8004df4:	08005195 	.word	0x08005195
 8004df8:	080051a6 	.word	0x080051a6

08004dfc <__sflush_r>:
 8004dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e04:	0716      	lsls	r6, r2, #28
 8004e06:	4605      	mov	r5, r0
 8004e08:	460c      	mov	r4, r1
 8004e0a:	d454      	bmi.n	8004eb6 <__sflush_r+0xba>
 8004e0c:	684b      	ldr	r3, [r1, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dc02      	bgt.n	8004e18 <__sflush_r+0x1c>
 8004e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	dd48      	ble.n	8004eaa <__sflush_r+0xae>
 8004e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	d045      	beq.n	8004eaa <__sflush_r+0xae>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e24:	682f      	ldr	r7, [r5, #0]
 8004e26:	6a21      	ldr	r1, [r4, #32]
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	d030      	beq.n	8004e8e <__sflush_r+0x92>
 8004e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	0759      	lsls	r1, r3, #29
 8004e32:	d505      	bpl.n	8004e40 <__sflush_r+0x44>
 8004e34:	6863      	ldr	r3, [r4, #4]
 8004e36:	1ad2      	subs	r2, r2, r3
 8004e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e3a:	b10b      	cbz	r3, 8004e40 <__sflush_r+0x44>
 8004e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e44:	6a21      	ldr	r1, [r4, #32]
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b0      	blx	r6
 8004e4a:	1c43      	adds	r3, r0, #1
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	d106      	bne.n	8004e5e <__sflush_r+0x62>
 8004e50:	6829      	ldr	r1, [r5, #0]
 8004e52:	291d      	cmp	r1, #29
 8004e54:	d82b      	bhi.n	8004eae <__sflush_r+0xb2>
 8004e56:	4a2a      	ldr	r2, [pc, #168]	@ (8004f00 <__sflush_r+0x104>)
 8004e58:	410a      	asrs	r2, r1
 8004e5a:	07d6      	lsls	r6, r2, #31
 8004e5c:	d427      	bmi.n	8004eae <__sflush_r+0xb2>
 8004e5e:	2200      	movs	r2, #0
 8004e60:	6062      	str	r2, [r4, #4]
 8004e62:	04d9      	lsls	r1, r3, #19
 8004e64:	6922      	ldr	r2, [r4, #16]
 8004e66:	6022      	str	r2, [r4, #0]
 8004e68:	d504      	bpl.n	8004e74 <__sflush_r+0x78>
 8004e6a:	1c42      	adds	r2, r0, #1
 8004e6c:	d101      	bne.n	8004e72 <__sflush_r+0x76>
 8004e6e:	682b      	ldr	r3, [r5, #0]
 8004e70:	b903      	cbnz	r3, 8004e74 <__sflush_r+0x78>
 8004e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e76:	602f      	str	r7, [r5, #0]
 8004e78:	b1b9      	cbz	r1, 8004eaa <__sflush_r+0xae>
 8004e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e7e:	4299      	cmp	r1, r3
 8004e80:	d002      	beq.n	8004e88 <__sflush_r+0x8c>
 8004e82:	4628      	mov	r0, r5
 8004e84:	f7ff fbf2 	bl	800466c <_free_r>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e8c:	e00d      	b.n	8004eaa <__sflush_r+0xae>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4628      	mov	r0, r5
 8004e92:	47b0      	blx	r6
 8004e94:	4602      	mov	r2, r0
 8004e96:	1c50      	adds	r0, r2, #1
 8004e98:	d1c9      	bne.n	8004e2e <__sflush_r+0x32>
 8004e9a:	682b      	ldr	r3, [r5, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0c6      	beq.n	8004e2e <__sflush_r+0x32>
 8004ea0:	2b1d      	cmp	r3, #29
 8004ea2:	d001      	beq.n	8004ea8 <__sflush_r+0xac>
 8004ea4:	2b16      	cmp	r3, #22
 8004ea6:	d11e      	bne.n	8004ee6 <__sflush_r+0xea>
 8004ea8:	602f      	str	r7, [r5, #0]
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e022      	b.n	8004ef4 <__sflush_r+0xf8>
 8004eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eb2:	b21b      	sxth	r3, r3
 8004eb4:	e01b      	b.n	8004eee <__sflush_r+0xf2>
 8004eb6:	690f      	ldr	r7, [r1, #16]
 8004eb8:	2f00      	cmp	r7, #0
 8004eba:	d0f6      	beq.n	8004eaa <__sflush_r+0xae>
 8004ebc:	0793      	lsls	r3, r2, #30
 8004ebe:	680e      	ldr	r6, [r1, #0]
 8004ec0:	bf08      	it	eq
 8004ec2:	694b      	ldreq	r3, [r1, #20]
 8004ec4:	600f      	str	r7, [r1, #0]
 8004ec6:	bf18      	it	ne
 8004ec8:	2300      	movne	r3, #0
 8004eca:	eba6 0807 	sub.w	r8, r6, r7
 8004ece:	608b      	str	r3, [r1, #8]
 8004ed0:	f1b8 0f00 	cmp.w	r8, #0
 8004ed4:	dde9      	ble.n	8004eaa <__sflush_r+0xae>
 8004ed6:	6a21      	ldr	r1, [r4, #32]
 8004ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004eda:	4643      	mov	r3, r8
 8004edc:	463a      	mov	r2, r7
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b0      	blx	r6
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	dc08      	bgt.n	8004ef8 <__sflush_r+0xfc>
 8004ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef8:	4407      	add	r7, r0
 8004efa:	eba8 0800 	sub.w	r8, r8, r0
 8004efe:	e7e7      	b.n	8004ed0 <__sflush_r+0xd4>
 8004f00:	dfbffffe 	.word	0xdfbffffe

08004f04 <_fflush_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	690b      	ldr	r3, [r1, #16]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	b913      	cbnz	r3, 8004f14 <_fflush_r+0x10>
 8004f0e:	2500      	movs	r5, #0
 8004f10:	4628      	mov	r0, r5
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	b118      	cbz	r0, 8004f1e <_fflush_r+0x1a>
 8004f16:	6a03      	ldr	r3, [r0, #32]
 8004f18:	b90b      	cbnz	r3, 8004f1e <_fflush_r+0x1a>
 8004f1a:	f7ff f99f 	bl	800425c <__sinit>
 8004f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f3      	beq.n	8004f0e <_fflush_r+0xa>
 8004f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f28:	07d0      	lsls	r0, r2, #31
 8004f2a:	d404      	bmi.n	8004f36 <_fflush_r+0x32>
 8004f2c:	0599      	lsls	r1, r3, #22
 8004f2e:	d402      	bmi.n	8004f36 <_fflush_r+0x32>
 8004f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f32:	f7ff fb8a 	bl	800464a <__retarget_lock_acquire_recursive>
 8004f36:	4628      	mov	r0, r5
 8004f38:	4621      	mov	r1, r4
 8004f3a:	f7ff ff5f 	bl	8004dfc <__sflush_r>
 8004f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f40:	07da      	lsls	r2, r3, #31
 8004f42:	4605      	mov	r5, r0
 8004f44:	d4e4      	bmi.n	8004f10 <_fflush_r+0xc>
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	059b      	lsls	r3, r3, #22
 8004f4a:	d4e1      	bmi.n	8004f10 <_fflush_r+0xc>
 8004f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f4e:	f7ff fb7d 	bl	800464c <__retarget_lock_release_recursive>
 8004f52:	e7dd      	b.n	8004f10 <_fflush_r+0xc>

08004f54 <__swhatbuf_r>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	460c      	mov	r4, r1
 8004f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	b096      	sub	sp, #88	@ 0x58
 8004f60:	4615      	mov	r5, r2
 8004f62:	461e      	mov	r6, r3
 8004f64:	da0d      	bge.n	8004f82 <__swhatbuf_r+0x2e>
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2340      	movne	r3, #64	@ 0x40
 8004f74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f78:	2000      	movs	r0, #0
 8004f7a:	6031      	str	r1, [r6, #0]
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	b016      	add	sp, #88	@ 0x58
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
 8004f82:	466a      	mov	r2, sp
 8004f84:	f000 f848 	bl	8005018 <_fstat_r>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	dbec      	blt.n	8004f66 <__swhatbuf_r+0x12>
 8004f8c:	9901      	ldr	r1, [sp, #4]
 8004f8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f96:	4259      	negs	r1, r3
 8004f98:	4159      	adcs	r1, r3
 8004f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f9e:	e7eb      	b.n	8004f78 <__swhatbuf_r+0x24>

08004fa0 <__smakebuf_r>:
 8004fa0:	898b      	ldrh	r3, [r1, #12]
 8004fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fa4:	079d      	lsls	r5, r3, #30
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	d507      	bpl.n	8004fbc <__smakebuf_r+0x1c>
 8004fac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	6123      	str	r3, [r4, #16]
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	6163      	str	r3, [r4, #20]
 8004fb8:	b003      	add	sp, #12
 8004fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fbc:	ab01      	add	r3, sp, #4
 8004fbe:	466a      	mov	r2, sp
 8004fc0:	f7ff ffc8 	bl	8004f54 <__swhatbuf_r>
 8004fc4:	9f00      	ldr	r7, [sp, #0]
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	4639      	mov	r1, r7
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f7ff fbba 	bl	8004744 <_malloc_r>
 8004fd0:	b948      	cbnz	r0, 8004fe6 <__smakebuf_r+0x46>
 8004fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fd6:	059a      	lsls	r2, r3, #22
 8004fd8:	d4ee      	bmi.n	8004fb8 <__smakebuf_r+0x18>
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	e7e2      	b.n	8004fac <__smakebuf_r+0xc>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	6020      	str	r0, [r4, #0]
 8004fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fee:	81a3      	strh	r3, [r4, #12]
 8004ff0:	9b01      	ldr	r3, [sp, #4]
 8004ff2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004ff6:	b15b      	cbz	r3, 8005010 <__smakebuf_r+0x70>
 8004ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f000 f81d 	bl	800503c <_isatty_r>
 8005002:	b128      	cbz	r0, 8005010 <__smakebuf_r+0x70>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	431d      	orrs	r5, r3
 8005014:	81a5      	strh	r5, [r4, #12]
 8005016:	e7cf      	b.n	8004fb8 <__smakebuf_r+0x18>

08005018 <_fstat_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4d07      	ldr	r5, [pc, #28]	@ (8005038 <_fstat_r+0x20>)
 800501c:	2300      	movs	r3, #0
 800501e:	4604      	mov	r4, r0
 8005020:	4608      	mov	r0, r1
 8005022:	4611      	mov	r1, r2
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	f7fc f87a 	bl	800111e <_fstat>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	d102      	bne.n	8005034 <_fstat_r+0x1c>
 800502e:	682b      	ldr	r3, [r5, #0]
 8005030:	b103      	cbz	r3, 8005034 <_fstat_r+0x1c>
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	bd38      	pop	{r3, r4, r5, pc}
 8005036:	bf00      	nop
 8005038:	20000924 	.word	0x20000924

0800503c <_isatty_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4d06      	ldr	r5, [pc, #24]	@ (8005058 <_isatty_r+0x1c>)
 8005040:	2300      	movs	r3, #0
 8005042:	4604      	mov	r4, r0
 8005044:	4608      	mov	r0, r1
 8005046:	602b      	str	r3, [r5, #0]
 8005048:	f7fc f879 	bl	800113e <_isatty>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d102      	bne.n	8005056 <_isatty_r+0x1a>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	b103      	cbz	r3, 8005056 <_isatty_r+0x1a>
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	20000924 	.word	0x20000924

0800505c <_sbrk_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4d06      	ldr	r5, [pc, #24]	@ (8005078 <_sbrk_r+0x1c>)
 8005060:	2300      	movs	r3, #0
 8005062:	4604      	mov	r4, r0
 8005064:	4608      	mov	r0, r1
 8005066:	602b      	str	r3, [r5, #0]
 8005068:	f7fc f882 	bl	8001170 <_sbrk>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_sbrk_r+0x1a>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_sbrk_r+0x1a>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	20000924 	.word	0x20000924

0800507c <_init>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr

08005088 <_fini>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	bf00      	nop
 800508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508e:	bc08      	pop	{r3}
 8005090:	469e      	mov	lr, r3
 8005092:	4770      	bx	lr
